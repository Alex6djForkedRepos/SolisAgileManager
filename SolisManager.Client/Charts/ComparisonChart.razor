@using ApexCharts

@inherits ChartBase<OctopusRate>

<ErrorBoundary>
    <div class="chart-area">
    @if (tariffDataAvailable)
    {
            <ApexChart @ref="chart"
                       TItem="OctopusRate"
                       XAxisType="XAxisType.Datetime"
                       Options="@Options"
                       Height="@("100%")">

                <ApexPointSeries TItem="OctopusRate"
                                 Items="@FirstSeries"
                                 Name="@FirstName"
                                 XValue="@(e => e.valid_from)"
                                 YValue="@(e => e.value_inc_vat)"
                                 SeriesType="SeriesType.Area"
                                 Color="dodgerblue"
                                 Stroke="@(new SeriesStroke { Color = "dodgerblue", Width = 3 })"/>

                <ApexPointSeries TItem="OctopusRate"
                                 Items="@SecondSeries"
                                 Name="@SecondName"
                                 XValue="@(e => e.valid_from)"
                                 YValue="@(e => e.value_inc_vat)"
                                 SeriesType="SeriesType.Line"
                                 Color="khaki"
                                 Stroke="@(new SeriesStroke { Color = "khaki", Width = 3 })"/>
            </ApexChart>
    }
    else
    {
        <div>No chart data available.</div>
    }
    </div>
</ErrorBoundary>

@code {
    [Parameter]
    public IEnumerable<OctopusRate>? FirstSeries { get; set; }

    [Parameter]
    public string? FirstName { get; set; }

    [Parameter]
    public IEnumerable<OctopusRate>? SecondSeries { get; set; }

    [Parameter]
    public string? SecondName { get; set; }

    private string FormatYAxisLabel(decimal val) => val == (int)val ? $"{val:F0}" : $"{val:F2}";

    private bool tariffDataAvailable = false;
    
    protected override async Task OnParametersSetAsync()
    {
        tariffDataAvailable = FirstSeries != null && FirstSeries.Any() && SecondSeries != null && SecondSeries.Any();
        StateHasChanged();
        
        if (chart != null)
            await chart.UpdateSeriesAsync();

        await DoGraphZoom();

        await base.OnParametersSetAsync();
    }

    private async Task DoGraphZoom()
    {
        if (chart != null && tariffDataAvailable)
        {
            await chart.UpdateSeriesAsync();

            var maxA = FirstSeries!.Max(x => x.valid_to);
            var maxB = SecondSeries!.Max(x => x.valid_to);

            var closest = new List<DateTime?> { maxA, maxB }.Min(x => x);

            if (closest != null)
            {
                await chart.ZoomXAsync(DateTime.Now.ToUnixTimeMilliseconds(),
                    closest.Value.ToUnixTimeMilliseconds());
            }
        }
    }

    protected override void SetOptions(ApexChartOptions<OctopusRate> options)
    {
        var yAxis = new List<YAxis>();

        yAxis.Add(new YAxis
        {
            Title = new AxisTitle { Text = "Price (p/kWh)" },
            SeriesName = "Price",
            DecimalsInFloat = 2
        });
        
        var fill = new Fill
        {
            // First type is for the first series, second type is for the second series.
            Type = [FillType.Gradient, FillType.Solid],
            Gradient = new FillGradient
            {
                Shade = GradientShade.Light,
                ShadeIntensity = 0,
                OpacityFrom = 0.8,
                OpacityTo = 0.1,
                GradientToColors = ["dodgerblue", "white"],
                Type = GradientType.Vertical
            }
        };

        options.Fill = fill;
        options.Yaxis = yAxis;
        options.Xaxis = new XAxis { Labels = new XAxisLabels { DatetimeUTC = false } };
    }

}
@using ApexCharts
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inherits ChartBase<HistoryEntry>

<ErrorBoundary>
@if (Options != null && HistoryData != null && HistoryData.Any())
{
    <div class="chart-area">
        <GraphActionLegend>
            @ZoomButton("1 day", 1)
            @ZoomButton("3 days", 3)
            @ZoomButton("1 week", 7)
            @ZoomButton("1 month", 30)
        </GraphActionLegend>
        <ApexChart @ref="chart"
                   TItem="HistoryEntry"
                   XAxisType="XAxisType.Datetime"
                   Options="@Options"
                   Height="@("100%")">

            <ApexPointSeries TItem="HistoryEntry"
                             Items="FilteredHistoryData"
                             Name="Price (p/kWh)"
                             XValue="@(e => e.Start)"
                             YValue="@(e => e.Price)"
                             SeriesType="SeriesType.Bar"
                             PointColor="e => GetColor(e)"
                             Stroke="@(new SeriesStroke { Width = 0 })"/>

            <ApexPointSeries TItem="HistoryEntry"
                             Items="FilteredHistoryData"
                             Name="SOC (%)"
                             XValue="@(e => e.Start)"
                             YValue="@(e => e.BatterySOC)"
                             SeriesType="SeriesType.Line"
                             Color="red"
                             Stroke="@(new SeriesStroke { Color = "red", Width = 3 })"/>

            <ApexPointSeries TItem="HistoryEntry"
                             Items="FilteredHistoryData"
                             Name="PV Forecast (kWh)"
                             XValue="@(e => e.Start)"
                             YValue="@(e => e.ForecastKWH)"
                             SeriesType="SeriesType.Line"
                             Color="darkkhaki"
                             Stroke="@(new SeriesStroke { Color = "darkkhaki", Width = 3 })"/>

            <ApexPointSeries TItem="HistoryEntry"
                             Items="FilteredHistoryData"
                             Name="PV Yield (kWh)"
                             XValue="@(e => e.Start)"
                             YValue="@(e => e.ActualKWH)"
                             SeriesType="SeriesType.Area"
                             Color="darkorange"
                             Stroke="@(new SeriesStroke { Color = "darkorange", Width = 1 })"/>

        </ApexChart>
    </div>
}
</ErrorBoundary>
@code {
    [Parameter]
    public IEnumerable<HistoryEntry>? HistoryData { get; set; }
    
    private int? defaultDays = 3;
    private IEnumerable<HistoryEntry> FilteredHistoryData => HistoryData?.Where(x => x.Start > DateTime.UtcNow.AddDays(-1 * (defaultDays ?? 7))) ?? [];
    
    private string FormatYAxisLabel(decimal val) => val == (int)val ? $"{val:F0}" : $"{val:F2}";
    private string GetBatteryColor(HistoryEntry slot) => "darkred";
    private string GetColor(HistoryEntry slot) => slot.Action.GetActionColour();

    private RenderFragment? ZoomButton(string text, int? days = null)
    {
        if (HistoryData != null)
        {
            var start = HistoryData.Min(x => x.Start);
            var end = HistoryData.Max(x => x.End);
            var rangeStart = start;

            if (days != null)
                rangeStart = end.AddDays(-1 * days.Value);

            if (days == null || (end - rangeStart).TotalDays < (end - start).TotalDays)
            {
                var color = Color.Surface;
                if (days == defaultDays)
                    color = Color.Primary;
                
                return @<MudButton OnClick="@(() => ZoomDays(days))" Variant="UIConstants.MudVariant" Color="@color" Size="Size.Small">@text</MudButton>;
            }
        }

        return null;
    }

    private async Task ZoomDays(int? days)
    {
        defaultDays = days ?? 7;
        StateHasChanged();
        await GraphStateChanged();
    }
    
    protected async Task ZoomDays(DateTime start, DateTime end)
    {
        if (chart != null && HistoryData != null)
        {
            await chart.ZoomXAsync(start.ToUnixTimeMilliseconds(), end.ToUnixTimeMilliseconds());
        }
    }

    protected override void SetOptions( ApexChartOptions<HistoryEntry> optionsToSet )
    {
        var yAxis = new List<YAxis>
        {
            new()
            {
                Title = new AxisTitle { Text = "Price (p/kWh)" },
                SeriesName = "Price (p/kWh)",
                DecimalsInFloat = 2, 
            },
            new()
            {
                Title = new AxisTitle { Text = "Battery SOC (%)" },
                SeriesName = "SOC (%)",
                DecimalsInFloat = 2,
                Opposite = true,
            },
            new()
            {
                Title = new AxisTitle { Text = "PV Forecast/Actual (kWh)" },
                SeriesName = ["PV Yield (kWh)", "PV Forecast (kWh)"],
                DecimalsInFloat = 2,
            }
        };

        var fill = new Fill
        {
            // First type is for the first series, second type is for the second series.
            Type = [FillType.Solid, FillType.Solid, FillType.Solid, FillType.Gradient],
            Gradient = new FillGradient
            {
                Shade = GradientShade.Light,
                ShadeIntensity = 0,
                OpacityFrom = 0.9,
                OpacityTo = 0.4,
                GradientToColors = ["darkorange", "orange"],
                Type = GradientType.Vertical
            }
        };
        
        optionsToSet.Yaxis = yAxis;
        optionsToSet.Fill = fill;
    }
}
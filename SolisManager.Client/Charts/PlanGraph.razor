@using ApexCharts

@inherits ChartBase<PricePlanSlot>

<ErrorBoundary>
    @if (Options != null && ChartData != null && ChartData.Any())
    {
        <div class="chart-area">
            <GraphActionLegend ChartTitle="Charging Strategy Graph"/>
            <ApexChart @ref="chart" TItem="PricePlanSlot" 
                       XAxisType="XAxisType.Datetime"
                       Options="@Options"
                       Height="@("100%")">

                <ApexPointSeries TItem="PricePlanSlot"
                                 Items="ChartData"
                                 Name="Price"
                                 XValue="@(e => e.valid_from)"
                                 YAggregate="@(e => e.Average(e => e.value_inc_vat))"
                                 SeriesType="SeriesType.Bar"
                                 Color="#005ba3"
                                 PointColor="e => GetColor(e)"/>
            </ApexChart>
        </div>
    }
</ErrorBoundary>

@code {
    [Parameter] public IEnumerable<PricePlanSlot> ChartData { get; set; } = [];
    
    private string FormatYAxisLabel(decimal val) => val == (int)val ? $"{val:F0}" : $"{val:F2}";

    private string GetColor(PricePlanSlot planSlot) => GetActionColour(planSlot.ActionToExecute.action);

    private string GetActionColour(SlotAction action) =>
            action switch
        {
            SlotAction.Charge => "royalblue",
            SlotAction.Discharge => "forestgreen",
            SlotAction.ChargeIfLowBattery => "darkorange",
            SlotAction.Hold => "orangered",
            _ => "rgba(200,200,200, 0.8)"
        };
    
    private RenderFragment ActionLegend( SlotAction a )
    {
        var style = $"color:{GetActionColour(a)}";
        return @<div>
                   <MudIcon style="@style" Icon="@Icons.Material.Filled.Circle" Size="@MudBlazor.Size.Small"/>
                   @a.Description()
               </div>;
    }

    protected override void SetOptions(ApexChartOptions<PricePlanSlot> options)
    {
        var yAxis = new List<YAxis>
        {
            new()
            {
                Title = new AxisTitle { Text = "Price (p/kWh)" },
                SeriesName = "Price",
                DecimalsInFloat = 2
            }
        };

        options.Yaxis = yAxis;
        options.Xaxis = new XAxis { Labels = new XAxisLabels { DatetimeUTC = false } };
    }
}

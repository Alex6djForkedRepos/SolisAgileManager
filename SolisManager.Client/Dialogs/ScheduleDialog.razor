@using Humanizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Scheduled Item </MudText>
    </TitleContent>
    <DialogContent>
        <div class="action-list">
            <div class="introduction">
                Scheduled actions are executed at the same time every day.
                For Charge and Discharge actions, you can optionally set an SOC
                threshold - leave blank to always charge/discharge. You can also 
                override the Ampage that will be used when charging/discharging. 
                Leave the amp value blank to use the global setting.
            </div>
            @if (ScheduledActions != null && ScheduledActions.Any())
            {
                @foreach (var scheduledAction in ScheduledActions.OrderBy(x => x.StartTime == null ? 1 : 0)
                              .ThenBy(x => x.StartTime))
                {
                    <div class="time-selection">
                        <SlotPicker @bind-SlotTime="scheduledAction.StartTime" Label="Start" disabled="scheduledAction.Disabled"/>
                        <div class="schedule-field action-picker">
                            <MudSelect @bind-Value="scheduledAction.Action" Label="Action" Disabled="scheduledAction.Disabled">
                                @SlotChoice(SlotAction.Charge)
                                @SlotChoice(SlotAction.Discharge)
                                @SlotChoice(SlotAction.DoNothing)
                                @SlotChoice(SlotAction.Hold)
                            </MudSelect>
                        </div>
                        @if (@ShowExtraFields(scheduledAction))
                        {
                            <div class="schedule-field soc-control">
                                <MudNumericField T="int?" @bind-Value="@scheduledAction.SOCTrigger" Label="@SOCText(scheduledAction)"
                                                 Disabled="@(scheduledAction.Disabled)"/>
                            </div>
                            <div class="schedule-field amps-control">
                                <MudNumericField T="int?" @bind-Value="@scheduledAction.Amps" Label="Amps"
                                                 Disabled="@(scheduledAction.Disabled)"/>
                            </div>
                        }
                        <div class="schedule-field">
                            @if (scheduledAction.Disabled)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.PlayCircle" Title="Enable this scheduled Action"
                                         @onclick="@(() => PauseEntry(scheduledAction, false))" Style="color: firebrick; cursor: pointer;margin-top: 15px;"/>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.PauseCircle" Title="Pause/Disable this scheduled Action"
                                         @onclick="@(() => PauseEntry(scheduledAction, true))" Style="color: forestgreen; cursor: pointer;margin-top: 15px;"/>
                            }
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Remove this scheduled Action"
                                     @onclick="@(() => DeleteEntry(scheduledAction))" Style="cursor: pointer;margin-top: 15px;"/>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="time-selection">
                    You have no configured scheduled actions.
                </div>
            }
        </div>
        @if (!string.IsNullOrEmpty(errorMsg))
        {
            <div class="error-msg">@errorMsg</div>
        }
    </DialogContent>
    <DialogActions>
        <div class="button-bar">
            <div>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="UIConstants.MudVariant" OnClick="AddEntry">Add Action</MudButton>
            </div>
            <div>
                <MudButton OnClick="Cancel" Variant="UIConstants.MudVariant">Cancel</MudButton>
                <MudButton Color="Color.Primary" Variant="UIConstants.MudVariant" OnClick="Save">Update</MudButton>
            </div>
        </div>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public List<ScheduledAction>? ScheduledActions { get; set; }

    private RenderFragment? SlotChoice(SlotAction action) => @<MudSelectItem Value="@action">
                                                                 <div class="selection-item"><ActionIcon Action="@action"/> 
                                                                 <div>@action.Humanize()</div>
                                                                 </div>
                                                </MudSelectItem>;

    private IEnumerable<TimeSpan?>? UsedDates => ScheduledActions?.Select(x => x.StartTime);
    private bool ShowExtraFields(ScheduledAction action) => action.Action is SlotAction.Charge or SlotAction.Discharge;
    private string SOCText(ScheduledAction action) => action.Action switch
    {
        SlotAction.Charge => "SOC < than (%)",
        SlotAction.Discharge => "SOC > than (%)",
        _ => ""
    };

    private void Save()
    {
        if (ScheduledActions != null)
        {
            if (ScheduledActions.Count() != ScheduledActions.DistinctBy(x => x.StartTime).Count())
            {
                DisplayError("Two or more of your scheduled actions are set for the same time!");
                return;
            }
        }

        MudDialog?.Close(DialogResult.Ok(ScheduledActions));
        StateHasChanged();
    }

    private string? errorMsg;

    private void DisplayError(string errorText)
    {
        errorMsg = errorText;
        StateHasChanged();
    }

    void Cancel()
    {
        MudDialog?.Cancel();
    }

    private void PauseEntry(ScheduledAction scheduledAction, bool disable)
    {
        scheduledAction.Disabled = disable;
        StateHasChanged();
    }

    private void DeleteEntry(ScheduledAction scheduledAction)
    {
        ScheduledActions?.Remove(scheduledAction);
    }

    private void AddEntry()
    {
        ScheduledActions?.Add( new());
    }
}
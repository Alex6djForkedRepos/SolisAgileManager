
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Scheduled Item </MudText>
    </TitleContent>
    <DialogContent>
        <div class="action-list">
        @if (ScheduledActions != null && ScheduledActions.Any())
        {
            @foreach (var scheduledAction in ScheduledActions)
            {
                <div class="time-selection">
                    <SlotPicker @bind-SlotTime="scheduledAction.StartTime" Label="Start"/>
                    <MudSelect @bind-Value="scheduledAction.Action" Label="Action">
                        <MudSelectItem Value="@SlotAction.DoNothing">No Action</MudSelectItem>
                        <MudSelectItem Value="@SlotAction.Charge">Charge</MudSelectItem>
                        <MudSelectItem Value="@SlotAction.Discharge">Discharge</MudSelectItem>
                        <MudSelectItem Value="@SlotAction.ChargeIfLowBattery">Charge If Low Battery</MudSelectItem>
                    </MudSelect>
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Remove this scheduled Action" @onclick="@(() => DeleteEntry(scheduledAction))" Style="cursor: pointer;"/>
                </div>
            }
        }
        else
        {
            <div class="time-selection">
                You have no configured scheduled actions.
            </div>
        }
        </div>
        @if (!string.IsNullOrEmpty(errorMsg))
        {
            <div class="error-msg">@errorMsg</div>
        }
    </DialogContent>
    <DialogActions>
        <div class="button-bar">
            <div>
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddEntry">Add Action</MudButton>
            </div>
            <div>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="Save">Update</MudButton>
            </div>
        </div>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public List<ScheduledAction>? ScheduledActions { get; set; }

    private IEnumerable<TimeSpan?>? UsedDates => ScheduledActions?.Select(x => x.StartTime);

    private void Save()
    {
        if (ScheduledActions != null)
        {
            if (ScheduledActions.Count() != ScheduledActions.DistinctBy(x => x.StartTime).Count())
            {
                DisplayError("Two or more of your scheduled actions are set for the same time!");
                return;
            }
        }

        MudDialog?.Close(DialogResult.Ok(ScheduledActions));
        StateHasChanged();
    }

    private string errorMsg;

    private void DisplayError(string errorText)
    {
        errorMsg = errorText;
        StateHasChanged();
    }

    void Cancel()
    {
        MudDialog?.Cancel();
    }

    private void DeleteEntry(ScheduledAction scheduledAction)
    {
        ScheduledActions?.Remove(scheduledAction);
    }

    private void AddEntry()
    {
        ScheduledActions?.Add( new());
    }
}
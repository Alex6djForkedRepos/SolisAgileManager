@inject IDialogService dialogService
@inject ISnackbar snackBar

@if (Slot != null)
{
        if (Slot.ManualOverride != null)
        {
            <div class="reset-button">
                <MudButton OnClick="ClearOverride" Variant="UIConstants.MudVariant" Size="Size.Small">Reset</MudButton>
            </div>
        }
        else
        {
            <div class="slot-buttons">
                @foreach (var action in AvailableActions)
                {
                    <ActionIcon Action="action" OnActionChanged="OnActionChanged"/>
                }
            </div>
            <div class="manual-button">
                <MudButton OnClick="OpenActionPopup" Variant="UIConstants.MudVariant" Size="Size.Small">Override</MudButton>
            </div>
        }
}

@code {
    [Parameter]
    public OctopusPriceSlot? Slot { get; set; }

    [Parameter]
    public EventCallback<ManualOverrideRequest> OnChangeSlotAction { get; set; }
    
    private SlotAction[] AvailableActions = [];

    protected override void OnParametersSet()
    {
        if (Slot != null)
            AvailableActions = Enum.GetValues<SlotAction>().Except([Slot.ActionToExecute.action]).ToArray();
        else
            AvailableActions = [];
        
        base.OnParametersSet();
    }

    private async Task OnActionChanged(SlotAction newAction)
    {
        if (Slot != null)
        {
            var req = new ManualOverrideRequest { SlotStart = Slot.valid_from, NewAction = newAction };
            await OnChangeSlotAction.InvokeAsync(req);
            snackBar.Add($"Action changed to {req.NewAction.Description()} for {req.SlotStart:HH:mm}", Severity.Success);
        }
    }

    private async Task OpenActionPopup()
    {
        ArgumentNullException.ThrowIfNull(Slot);
        
        var parameters = new DialogParameters { { "Slot", Slot }, { "AvailableActions", AvailableActions } };
        var dialog = await dialogService.ShowAsync<ManualOverrideDialog>(null, parameters);
        var result = await dialog.Result;

        if (result != null && result.Data != null)
        {
            await OnActionChanged((SlotAction)(result.Data));
        }
    }

    private async Task ClearOverride()
    {
        if (Slot != null)
        {
            var req = new ManualOverrideRequest { SlotStart = Slot.valid_from, ClearManualOverride = true };
            snackBar.Add($"Override cleared for {Slot.valid_from:HH:mm}", Severity.Success);
            await OnChangeSlotAction.InvokeAsync(req);
        }
    }
}
@inject IDialogService dialogService

@if (Slot != null)
{
        @if (Slot.OverrideType == OctopusPriceSlot.SlotOverrideType.Scheduled)
        {
            <div class="scheduled-override" title="@Slot.ActionReason">
                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Title="Scheduled action" />
                <text>Schedule Action</text>
            </div>
        }
        else
        {
            @if (Slot.OverrideType == OctopusPriceSlot.SlotOverrideType.None)
            {
                <div class="slot-buttons">
                    @foreach (var action in AvailableActions)
                    {
                        <ActionIcon Action="action" OnActionChanged="OnActionChanged"/>
                    }
                </div>
                <div class="manual-button">
                    <MudButton OnClick="OpenActionPopup" Variant="UIConstants.MudVariant" Size="Size.Small">Override</MudButton>
                </div>
            }
            else
            {
                <div class="reset-button">
                    <MudButton OnClick="ClearOverride" Variant="UIConstants.MudVariant" Size="Size.Small">Reset</MudButton>
                </div>
            }
        }
}

@code {
    [Parameter]
    public OctopusPriceSlot? Slot { get; set; }

    [Parameter]
    public EventCallback<ChangeSlotActionRequest> OnChangeSlotAction { get; set; }
    
    private SlotAction[] AvailableActions = [];

    protected override void OnParametersSet()
    {
        if (Slot != null)
            AvailableActions = Enum.GetValues<SlotAction>().Except([Slot.ActionToExecute]).ToArray();
        else
            AvailableActions = [];
        
        base.OnParametersSet();
    }

    private async Task OnActionChanged(SlotAction newAction)
    {
        if (Slot != null)
        {
            var req = new ChangeSlotActionRequest { SlotStart = Slot.valid_from, NewAction = newAction };
            await OnChangeSlotAction.InvokeAsync(req);
        }
    }

    private async Task OpenActionPopup()
    {
        ArgumentNullException.ThrowIfNull(Slot);
        
        var parameters = new DialogParameters { { "Slot", Slot }, { "AvailableActions", AvailableActions } };
        var dialog = await dialogService.ShowAsync<ManualOverrideDialog>(null, parameters);
        var result = await dialog.Result;

        if (result != null && result.Data != null)
        {
            await OnActionChanged((SlotAction)(result.Data));
        }
    }

    private async Task ClearOverride()
    {
        var req = new ChangeSlotActionRequest { SlotStart = Slot.valid_from, NewAction = Slot.PlanAction };
        await OnChangeSlotAction.InvokeAsync(req);

    }
}
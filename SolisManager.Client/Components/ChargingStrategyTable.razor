@using Humanizer
@inject IInverterService clientInverterService

<PageTitle>Solis Manager</PageTitle>

<div class="title-bar">
    <h1>Prices &amp; Charging Plan</h1>
    <div class="extra-info">
        <Battery ChargePercentage="@prices?.BatterySOC"/>
        <div title="Clear any manual overrides that are currently in effect">
            <MudIconButton OnClick="@ClearOverrides" Icon="@Icons.Material.Filled.Clear"
                           Variant="Variant.Filled" Size="Size.Small" />
        </div>
    </div>
</div>

@if (prices == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Period</th>
            <th>Agile Price (p/kWh)</th>
            <th>Price Type</th>
            <th>Battery Action</th>
            <th>PV Forecast (kWh)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var slot in prices.Prices)
        {
            <tr>
                <td>@slot.valid_from.ToString("dd-MMM")</td>
                <td>@slot.valid_from.ToString("HH:mm") - @slot.valid_to.ToString("HH:mm")</td>
                <td>@Math.Round(slot.value_inc_vat, 2)</td>
                <td><PriceType Type="@slot.PriceType"/></td>
                <td><SlotAction Slot="@slot"/></td>
                <td>@ForecastEstimate(slot)</td>
            </tr>
        }
        </tbody>
    </table>
    <p>Last update: @prices.TimeStamp, last battery update: @prices.BatteryTimeStamp, last Solcast update: @(SolcastUpdate)</p>
}

@code {
    private SolisManagerState? prices;
    private string BatteryText => $"Battery Charge: {prices?.BatterySOC}%";
    private readonly PeriodicTimer timer = new PeriodicTimer(TimeSpan.FromMinutes(1));
    private string ForecastEstimate(OctopusPriceSlot s) => s.pv_est_kwh != null ? Math.Round(s.pv_est_kwh.Value, 2).ToString() : string.Empty;
    private string SolcastUpdate => prices?.SolcastTimeStamp?.ToString() ?? "never";
    private async Task RefreshData()
    {
        prices = await clientInverterService.GetAgilePriceSlots();
        
        StateHasChanged();
    }

    private async Task ClearOverrides()
    {
        await clientInverterService.ClearOverrides();
        await RefreshData();
    }
    
    private async Task RunTimer()
    {
        while (await timer.WaitForNextTickAsync())
            await RefreshData();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        _ = RunTimer();

        await base.OnInitializedAsync();
    }
}
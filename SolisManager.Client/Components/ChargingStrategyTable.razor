
@inject IInverterManagerService inverterManagerService
@inject IDialogService dialogService
@inject ISnackbar snackBar

@implements IDisposable

<PageTitle>Solis Manager</PageTitle>

<div class="strategy-table @DarkModeStyle">
    <TopStatusBar PageTitle="Charging Plan" @bind-SelectedView="selectedView" ViewSettingName="plan-view">
        <ChildContent>
            @if (isSimulateMode)
            {
                <div class="simulate-indicator" title="Simulation mode enabled - changes will not be applied to the inverter">
                    Simulation Mode
                    @if (inverterManagerService.InverterState.Prices.Any())
                    {
                        <MudIcon @onclick="@AdvanceSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.SkipNext" Size="Size.Small">
                            Advance
                        </MudIcon>
                    }
                    else
                    {
                        <MudIcon @onclick="@ResetSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small">
                            Reset
                        </MudIcon>
                    }
                </div>
            }
            @if (manualOverridesExist)
            {
                <div title="Clear any manual overrides that are currently in effect">
                    <MudButton OnClick="@ClearManualOverrides" StartIcon="@Icons.Material.Filled.Cancel"
                               Variant="UIConstants.MudVariant" Size="Size.Small">
                        Reset
                    </MudButton>
                </div>
            }
        </ChildContent>
    </TopStatusBar>
    
    <div class="table-chart">
        @if (selectedView == ViewSelector.ViewType.Chart)
        {
            <PlanGraph ChartData="inverterManagerService.InverterState.Prices"/>
        }
        else
        {
            <MudTable T="PricePlanSlot" Items="inverterManagerService.InverterState.Prices" FixedHeader="true" 
                      GroupBy="_groupDefinition" Dense="true" Breakpoint="Breakpoint.None" Height="100%">
                <ColGroup>
                    <col style="width:100px;"/>
                    <col style="width:150px;"/>
                    <col style="width:150px;"/>
                    <col style="width:150px;"/>
                    @if (hasSolcastData)
                    {
                        <col style="width:100px;"/>
                    }
                    <col/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Period</MudTh>
                    <MudTh>Price (p/kWh)</MudTh>
                    <MudTh>Plan</MudTh>
                    <MudTh Style="text-align: center;">Manual Actions</MudTh>
                    @if (hasSolcastData)
                    {
                        <MudTh Style="text-align: right;">Forecast (kWh)</MudTh>
                    }
                </HeaderContent>
                <FooterContent>
                    @FooterSummary()
                </FooterContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group date-row" colspan="@(hasSolcastData ? 5 : 6)">
                        @SummaryRow(context)
                    </MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Period">
                        <div class="valid-from">
                            <div class="sunset-indicator">
                                <DayNightIndicator Day="@context.Daytime"/>
                            </div>
                            @context.valid_from.ToString("HH:mm")
                            <div class="valid-to">&nbsp;- @context.valid_to.ToString("HH:mm")</div>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Price (p/kWh)">
                        <PriceIndicator Type="@context.PriceType" Price="@context.value_inc_vat"/>
                    </MudTd>
                    <MudTd DataLabel="Plan"><SlotPlan Slot="@context"/></MudTd>
                    <MudTd DataLabel="Manual Action">
                        <SlotActions Slot="@context" OnChangeSlotAction="ChangeSlotAction"/>
                    </MudTd>
                    @if (hasSolcastData)
                    {
                        <MudTd Style="text-align: right;" DataLabel="Forecast">@ForecastEstimate(context)</MudTd>
                    }
                </RowTemplate>
            </MudTable>
        }
    </div>

    <LastUpdateState InverterState="@inverterManagerService.InverterState"/>
</div>

@code {
    [CascadingParameter] protected bool DarkMode { get; set; }

    private string DarkModeStyle => DarkMode ? "table-dark" : string.Empty;
    
    private readonly PeriodicTimer timer = new(TimeSpan.FromMinutes(1));
    private CancellationTokenSource tokenSource = new();

    private RenderFragment? FooterSummary()
    {
        var tomorrow = DateTime.Now.AddDays(1).Date;
        
        if (inverterManagerService.InverterState.Prices.Any(x => x.valid_from.Date == tomorrow))
            return null;

        // If there aren't any slots for tomorrow, add a summary row with tomorrow's forecast.
        return @<MudTh Class="mud-table-cell-custom-group date-row" colspan="@(hasSolcastData ? 5 : 6)">
                @SummaryEntry(DateTime.Now.Date.AddDays(1), null)
            </MudTh>;
    }
    
    private RenderFragment SummaryRow(TableGroupData<object, PricePlanSlot> groupData)
    {
        var date = groupData.Key as DateTime?;
        var forecastTotal = groupData.Items.Sum(x => x.pv_est_kwh);

        return SummaryEntry(date, forecastTotal);
    }
    
    private RenderFragment SummaryEntry(DateTime? date, decimal? forecastTotal)
    {
        if (date != null)
        {
            if (date.Value.Date == DateTime.UtcNow.Date)
            {
                // Get the *whole* forecast for today, not the partial one.
                forecastTotal = inverterManagerService.InverterState.TodayForecastKWH;
            }
            else if (date.Value.Date == DateTime.UtcNow.AddDays(1).Date)
            {
                forecastTotal = inverterManagerService.InverterState.TomorrowForecastKWH;
            }
        }

        RenderFragment? forecastFragment = null;
        if (forecastTotal != null && forecastTotal != 0)
        {
            var dampedForecast = Math.Round(forecastTotal.Value * forecastDamping, 2);
            var ForcastDescription = $"Forecast PV for {date:dd-MMM}";
            var extraText = $"(Undamped Forecast: {Math.Round(forecastTotal.Value, 2)}kWh)";

            forecastFragment = @<ValueChip Icon="@Icons.Material.Filled.Timeline" Value="@dampedForecast"
                                           Description="@ForcastDescription" ExtraText="@extraText" 
                                           Units="kWh" Decimals="2"/>;
        }

        return @<div class="summary-row">
           <div>
               <DateDisplay Date="@date"/>
           </div>
            <div>
                @forecastFragment
            </div>
        </div>;
    }
    
    private TableGroupDefinition<PricePlanSlot> _groupDefinition = new()
    {
        GroupName = "Date",
        Indentation = false,
        Expandable = false,
        IsInitiallyExpanded = true,
        Selector = (e) => e.valid_from.Date
    };
    
    private string ForecastEstimate(PricePlanSlot s) => s.pv_est_kwh != null ? 
                        Math.Round(s.pv_est_kwh.Value * forecastDamping, 2).ToString(CultureInfo.InvariantCulture) : string.Empty;

    private string ForecastTooltip(PricePlanSlot s) => $"Solcast Power forecast: {s.pv_est_kwh}kW";
    private bool hasSolcastData = false;
    private bool isSimulateMode = false;
    private bool manualOverridesExist = false;
    private decimal forecastDamping = 1M;
    private ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;
    private string PriceStyle(PricePlanSlot planSlot) => $"text-align:center;";
    
    private async Task ChangeSlotAction(ManualOverrideRequest req)
    {
        await inverterManagerService.OverrideSlotAction(req);
        await RefreshData();
    }

    private async Task RefreshData()
    {
        // Get the latest data
        await inverterManagerService.RefreshInverterState();
        hasSolcastData = inverterManagerService.InverterState.Prices.Any(x => x.pv_est_kwh != null);
        manualOverridesExist = inverterManagerService.InverterState.Prices.Any(x => x.ManualOverride != null);

        StateHasChanged();
    }

    private async Task ClearManualOverrides()
    {
        await inverterManagerService.ClearManualOverrides();
        snackBar.Add($"All manual overrides cleared", Severity.Success);
        await RefreshData();
    }

    private async Task AdvanceSimulation()
    {
        await inverterManagerService.AdvanceSimulation();
        await RefreshData();
    }

    private async Task ResetSimulation()
    {
        await inverterManagerService.ResetSimulation();
        await RefreshData();
    }

    private async Task RunTimer()
    {
        while (await timer.WaitForNextTickAsync(tokenSource.Token))
            await RefreshData();
    }

    public void Dispose()
    {
        tokenSource.Cancel();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var config = await inverterManagerService.GetConfig();

        if (config.Simulate != isSimulateMode || config.SolcastDampFactor != forecastDamping)
        {
            isSimulateMode = config.Simulate;
            forecastDamping = config.SolcastDampFactor;
            StateHasChanged();
        }

        await RefreshData();
        _ = RunTimer();

        await base.OnInitializedAsync();
    }
}
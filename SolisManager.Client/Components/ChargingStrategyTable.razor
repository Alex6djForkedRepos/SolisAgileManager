@using System.Globalization
@using Humanizer
@using SolisManager.Client.Layout
@inject IInverterService inverterService
@inject IDialogService dialogService
@inject ISnackbar snackBar

@implements IDisposable

<PageTitle>Solis Manager</PageTitle>

<div class="strategy-table">
    <div class="title-bar">
        <div class="title-and-nav">
            <div class="title-text">
                <h5>Prices &amp; Charging Plan</h5>
            </div>
            <ViewSelector @bind-SelectedView="selectedView" SettingName="plan-view"/>
        </div>
        @if (isSimulateMode)
        {
            <div class="simulate-indicator" title="Simulation mode enabled - no changes will be applied to the inverter">
                Simulation Mode
                @if (inverterService.InverterState.Prices.Any())
                {
                    <MudIcon @onclick="@AdvanceSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.SkipNext" Size="Size.Small">
                        Advance
                    </MudIcon>
                }
                else
                {
                    <MudIcon @onclick="@ResetSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small">
                        Reset
                    </MudIcon>
                }
            </div>
        }
        @if (manualOverridesExist)
        {
            <div title="Clear any manual overrides that are currently in effect">
                <MudButton OnClick="@ClearOverrides" StartIcon="@Icons.Material.Filled.Cancel"
                           Variant="UIConstants.MudVariant" Size="Size.Small">
                    Clear Overrides
                </MudButton>
            </div>
        }

        <Battery ChargePercentage="@inverterService.InverterState.BatterySOC"/>
        <ValueChip Icon="@Icons.Material.Filled.House" Value="@inverterService.InverterState.HouseLoadkW"
                   Description="Current load being consumed by the house" Units="kW"/>
        <ValueChip Icon="@Icons.Material.Filled.SolarPower" Value="@inverterService.InverterState.CurrentPVkW"
                   Description="Current Solar PV generation" Units="kW"/>
        <ValueChip Icon="@Icons.Material.Filled.WbSunny" Value="@inverterService.InverterState.TodayPVkWh"
                   Description="Total Solar PV Generation today" Units="kWh"/>
        <ValueChip Icon="@Icons.Material.Filled.Timeline" Value="@inverterService.InverterState.ForecastPVkWh"
                   Description="@($"Solar PV Forecast {inverterService.InverterState.ForecastDayLabel}")" Units="kWh"/>
    </div>

    <div class="table-chart">
        @if (selectedView == ViewSelector.ViewType.Chart)
        {
            <PlanGraph ChartData="inverterService.InverterState.Prices"/>
        }
        else
        {
            <table class="table">
                <colgroup>
                    <col style="width:100px;"/>
                    <col style="width:150px;"/>
                    <col style="width:150px;"/>
                    <col style="width:150px;"/>
                    <col style="width:75px;"/>
                    @if (hasSolcastData)
                    {
                        <col style="width:100px;"/>
                    }
                    <col/>
                </colgroup>
                <thead>
                <tr>
                    <th>Period</th>
                    <th>Price (p/kWh)</th>
                    <th>Plan</th>
                    @if (hasSolcastData)
                    {
                        <th>Forecast (PV kWh)</th>
                    }
                    <th>Manual Actions</th>
                </tr>
                </thead>
                <tbody>
                @(lastDate = null)
                @foreach (var slot in inverterService.InverterState.Prices)
                {
                    @DateHeader(slot)
                    <tr>
                        <td>
                            <div class="valid-from">
                                @slot.valid_from.ToString("HH:mm")
                                <div class="valid-to">&nbsp;- @slot.valid_to.ToString("HH:mm")</div>
                            </div>
                        </td>
                        <td style="@PriceStyle(slot)">
                            <PriceIndicator Type="@slot.PriceType" Price="@slot.value_inc_vat"/>
                        </td>
                        <td><SlotPlan Slot="@slot" OnOverrideCleared="ClearOverride"/></td>
                        @if (hasSolcastData)
                        {
                            <td style="text-align:center;">@ForecastEstimate(slot)</td>
                        }
                        <td><SlotActions Slot="@slot" OnChangeSlotAction="ChangeSlotAction"/></td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>

    <LastUpdateState InverterState="@inverterService.InverterState"/>
</div>

@code {
    private readonly PeriodicTimer timer = new(TimeSpan.FromMinutes(1));
    private CancellationTokenSource tokenSource = new();

    private string ForecastEstimate(OctopusPriceSlot s) => s.pv_est_kwh != null ? Math.Round(s.pv_est_kwh.Value, 2).ToString(CultureInfo.InvariantCulture) : string.Empty;
    private bool hasSolcastData = false;
    private bool isSimulateMode = false;
    private bool manualOverridesExist = false;
    private DateOnly? lastDate = null;
    private ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;
    private string PriceStyle(OctopusPriceSlot slot) => $"text-align:center; color: {(slot.value_inc_vat < 0 ? "darkred" : "black")};";

    private RenderFragment? DateHeader(OctopusPriceSlot slot)
    {
        var date = DateOnly.FromDateTime(slot.valid_from.Date);

        @if (lastDate == null || lastDate.Value != date)
        {
            lastDate = date;
            return @<tr>
                       <td colspan="6" class="date-row">
                           <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small"/>
                           @slot.valid_from.DisplayDate()
                       </td>
                   </tr>;
        }

        return null;
    }

    private async Task ClearOverride(OctopusPriceSlot slot)
    {
        var req = new ChangeSlotActionRequest { SlotStart = slot.valid_from, NewAction = slot.PlanAction };
        await inverterService.OverrideSlotAction(req);
        await RefreshData();
        snackBar.Add($"Override cleared for {slot.valid_from:HH:mm}", Severity.Info);
    }
    
    private async Task ChangeSlotAction(ChangeSlotActionRequest req)
    {
        await inverterService.OverrideSlotAction(req);
        await RefreshData();
        snackBar.Add($"Action changed to {req.NewAction.Humanize()} for {req.SlotStart:HH:mm}", Severity.Info);
    }

    private async Task RefreshData()
    {
        // Get the latest data
        await inverterService.RefreshInverterState();
        lastDate = null;
        hasSolcastData = inverterService.InverterState.Prices.Any(x => x.pv_est_kwh != null);
        manualOverridesExist = inverterService.InverterState.Prices.Any(x => x.ManualOverrideAction != null);

        StateHasChanged();
    }

    private async Task ClearOverrides()
    {
        await inverterService.ClearOverrides();
        await RefreshData();
    }

    private async Task AdvanceSimulation()
    {
        await inverterService.AdvanceSimulation();
        await RefreshData();
    }

    private async Task ResetSimulation()
    {
        await inverterService.ResetSimulation();
        await RefreshData();
    }

    private async Task RunTimer()
    {
        while (await timer.WaitForNextTickAsync(tokenSource.Token))
            await RefreshData();
    }

    public void Dispose()
    {
        tokenSource.Cancel();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var config = await inverterService.GetConfig();
        isSimulateMode = config.Simulate;

        await RefreshData();
        _ = RunTimer();

        await base.OnInitializedAsync();
    }
}
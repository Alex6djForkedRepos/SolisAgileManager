@using System.Globalization
@inject IInverterService inverterService

<PageTitle>Solis Manager</PageTitle>

<div class="title-bar">
    <h3>Prices &amp; Charging Plan</h3>
    @if (isSimulateMode)
    {
        <div class="simulate-indicator" title="Simulation mode enabled - no changes will be applied to the inverter">
            Simulation Mode
        @if (inverterService.InverterState.Prices.Any())
        {
            <MudIcon @onclick="@AdvanceSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.SkipNext"
                       Variant="UIConstants.MudVariant" Size="Size.Small">
                Advance
            </MudIcon>
        }
        else
        {
            <MudIcon @onclick="@ResetSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.Refresh"
                       Variant="UIConstants.MudVariant" Size="Size.Small">
                Reset
            </MudIcon>
        }
        </div>
    }
    <div class="extra-info">
        @if (manualOverridesExist)
        {
            <div title="Clear any manual overrides that are currently in effect">
                <MudButton OnClick="@ClearOverrides" StartIcon="@Icons.Material.Filled.Cancel"
                           Variant="UIConstants.MudVariant" Size="Size.Small">
                    Clear Overrides
                </MudButton>
            </div>
        }

        <ValueChip Icon="@Icons.Material.Filled.House" Value="@(Math.Round(inverterService.InverterState.HouseLoadkW, 2))"
                   Description="Current load being consumed by the house" Units="kW"/>
        <ValueChip Icon="@Icons.Material.Filled.SolarPower" Value="@(Math.Round(inverterService.InverterState.CurrentPVkW, 2))"
                   Description="Current Solar PV generation" Units="kW"/>
        <ValueChip Icon="@Icons.Material.Filled.WbSunny" Value="@(Math.Round(inverterService.InverterState.TodayPVkWh, 2))"
                   Description="Total Solar PV Generation today" Units="kWh"/>
        <Battery ChargePercentage="@inverterService.InverterState.BatterySOC"/>
    </div>
</div>

    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Period</th>
            <th>Agile Price (p/kWh)</th>
            <th>Price Type</th>
            <th>Battery Plan</th>
            <th>Slot Actions</th>
            <th>PV Forecast (kWh)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var slot in inverterService.InverterState.Prices)
        {
            <tr>
                <td>@slot.valid_from.ToString("dd-MMM")</td>
                <td>@slot.valid_from.ToString("HH:mm") - @slot.valid_to.ToString("HH:mm")</td>
                <td>@Math.Round(slot.value_inc_vat, 2)</td>
                <td><PriceType Type="@slot.PriceType"/></td>
                <td><SlotPlan Slot="@slot"/></td>
                <td><SlotActions Slot="@slot" OnCancelSlotAction="CancelSlotAction"/></td>
                <td>@ForecastEstimate(slot)</td>
            </tr>
        }
        </tbody>
    </table>
    <p>Last update: @inverterService.InverterState.TimeStamp, last battery update: @inverterService.InverterState.BatteryTimeStamp, last Solcast update: @(SolcastUpdate)</p>

@code {
    private readonly PeriodicTimer timer = new (TimeSpan.FromMinutes(1));
    private string ForecastEstimate(OctopusPriceSlot s) => s.pv_est_kwh != null ? Math.Round(s.pv_est_kwh.Value, 2).ToString(CultureInfo.InvariantCulture) : string.Empty;
    private string SolcastUpdate => inverterService.InverterState?.SolcastTimeStamp?.ToString() ?? "never";
    private bool isSimulateMode = false;
    private bool manualOverridesExist = false;

    private async Task CancelSlotAction(OctopusPriceSlot slot)
    {
        await inverterService.CancelSlotAction(slot);
        await RefreshData();
    }
    
    private async Task RefreshData()
    {
        // Get the latest data
        await inverterService.RefreshInverterState();

        manualOverridesExist = inverterService.InverterState.Prices.Any(x => x.IsManualOverride);
        
        StateHasChanged();
    }

    private async Task ClearOverrides()
    {
        await inverterService.ClearOverrides();
        await RefreshData();
    }

    private async Task AdvanceSimulation()
    {
        await inverterService.AdvanceSimulation();
        await RefreshData();
    }

    private async Task ResetSimulation()
    {
        await inverterService.ResetSimulation();
        await RefreshData();
    }

    private async Task RunTimer()
    {
        while (await timer.WaitForNextTickAsync())
            await RefreshData();
    }

    protected override async Task OnInitializedAsync()
    {
        var config = await inverterService.GetConfig();
        isSimulateMode = config.Simulate;
        
        await RefreshData();
        _ = RunTimer();

        await base.OnInitializedAsync();
    }
}
@using System.Globalization
@using Humanizer
@using SolisManager.Shared.Interfaces
@inject IInverterManagerService inverterManagerService
@inject IDialogService dialogService
@inject ISnackbar snackBar

@implements IDisposable

<PageTitle>Solis Manager</PageTitle>

<div class="strategy-table @DarkModeStyle">
    <div class="title-bar">
        <div class="title-and-nav">
            <div class="title-text">
                <h5>Charging Plan</h5>
            </div>
            <ViewSelector @bind-SelectedView="selectedView" SettingName="plan-view"/>
        </div>
        @if (isSimulateMode)
        {
            <div class="simulate-indicator" title="Simulation mode enabled - no changes will be applied to the inverter">
                Simulation Mode
                @if (inverterManagerService.InverterState.Prices.Any())
                {
                    <MudIcon @onclick="@AdvanceSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.SkipNext" Size="Size.Small">
                        Advance
                    </MudIcon>
                }
                else
                {
                    <MudIcon @onclick="@ResetSimulation" Style="cursor:pointer;" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small">
                        Reset
                    </MudIcon>
                }
            </div>
        }
        @if (manualOverridesExist)
        {
            <div title="Clear any manual overrides that are currently in effect">
                <MudButton OnClick="@ClearManualOverrides" StartIcon="@Icons.Material.Filled.Cancel"
                           Variant="UIConstants.MudVariant" Size="Size.Small">
                    Reset
                </MudButton>
            </div>
        }

        <Battery ChargePercentage="@inverterManagerService.InverterState.BatterySOC" BatteryPowerKW="inverterManagerService.InverterState.CurrentBatteryPowerKW"/>
        <ValueChip Icon="@Icons.Material.Filled.House" Value="@inverterManagerService.InverterState.HouseLoadkW"
                   Description="Current load being consumed by the house" Units="kW"/>
        <ValueChip Icon="@Icons.Material.Filled.SolarPower" Value="@inverterManagerService.InverterState.CurrentPVkW"
                   Description="Current solar PV generation" Units="kW"/>
        <ValueChip Icon="@Icons.Material.Filled.WbSunny" Value="@inverterManagerService.InverterState.TodayPVkWh"
                   Description="Total solar PV generation today" Units="kWh"/>
        <ValueChip Icon="@Icons.Material.Filled.ElectricalServices" Value="@inverterManagerService.InverterState.TodayImportkWh"
                   Description="Grid import today" Units="kWh"/>
        <ValueChip Icon="@Icons.Material.Filled.Output" Value="@inverterManagerService.InverterState.TodayExportkWh"
                   Description="Grid export today" Units="kWh"/>
    </div>
    
    <div class="table-chart">
        @if (selectedView == ViewSelector.ViewType.Chart)
        {
            <PlanGraph ChartData="inverterManagerService.InverterState.Prices"/>
        }
        else
        {
            <MudTable T="OctopusPriceSlot" Items="inverterManagerService.InverterState.Prices" FixedHeader="true" 
                      GroupBy="_groupDefinition" Dense="true" Breakpoint="Breakpoint.None" Height="100%">
                <ColGroup>
                    <col style="width:100px;"/>
                    <col style="width:150px;"/>
                    <col style="width:150px;"/>
                    <col style="width:150px;"/>
                    @if (hasSolcastData)
                    {
                        <col style="width:100px;"/>
                    }
                    <col/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Period</MudTh>
                    <MudTh>Price (p/kWh)</MudTh>
                    <MudTh>Plan</MudTh>
                    <MudTh Style="text-align: center;">Manual Actions</MudTh>
                    @if (hasSolcastData)
                    {
                        <MudTh Style="text-align: right;">Forecast (kWh)</MudTh>
                    }
                </HeaderContent>
                <FooterContent>
                    @FooterSummary()
                </FooterContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group date-row" colspan="@(hasSolcastData ? 5 : 6)">
                        @SummaryRow(context)
                    </MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Period">
                        <div class="valid-from">
                            @context.valid_from.ToString("HH:mm")
                            <div class="valid-to">&nbsp;- @context.valid_to.ToString("HH:mm")</div>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Price (p/kWh)">
                        <PriceIndicator Type="@context.PriceType" Price="@context.value_inc_vat"/>
                    </MudTd>
                    <MudTd DataLabel="Plan"><SlotPlan Slot="@context"/></MudTd>
                    <MudTd DataLabel="Manual Action">
                        <SlotActions Slot="@context" OnChangeSlotAction="ChangeSlotAction"/>
                    </MudTd>
                    @if (hasSolcastData)
                    {
                        <MudTd Style="text-align: right;" DataLabel="Forecast">@ForecastEstimate(context)</MudTd>
                    }
                </RowTemplate>
            </MudTable>
        }
    </div>

    <LastUpdateState InverterState="@inverterManagerService.InverterState"/>
</div>

@code {
    [CascadingParameter] protected bool DarkMode { get; set; }

    private string DarkModeStyle => DarkMode ? "table-dark" : string.Empty;
    
    private readonly PeriodicTimer timer = new(TimeSpan.FromMinutes(1));
    private CancellationTokenSource tokenSource = new();

    private RenderFragment? FooterSummary()
    {
        if (inverterManagerService.InverterState.Prices.Any(x => x.valid_from.Date == DateTime.UtcNow.AddDays(1).Date))
            return null;

        // If there aren't any slots for tomorrow, add a summary row with tomorrow's forecast.
        return @<MudTh Class="mud-table-cell-custom-group date-row" colspan="@(hasSolcastData ? 5 : 6)">
                @SummaryEntry(DateTime.UtcNow.Date.AddDays(1), inverterManagerService.InverterState.TomorrowForecastKWH)
            </MudTh>;
    }
    
    private RenderFragment SummaryRow(TableGroupData<object, OctopusPriceSlot> groupData)
    {
        var date = groupData.Key as DateTime?;
        var forecastTotal = groupData.Items.Sum(x => x.pv_est_kwh);

        return SummaryEntry(date, forecastTotal);
    }
    
    private RenderFragment SummaryEntry(DateTime? date, decimal? forecastTotal)
    {
        if (date != null && date.Value.Date == DateTime.UtcNow.Date)
        {
            // Get the *whole* forecast for today, not the partial one.
            forecastTotal = inverterManagerService.InverterState.TodayForecastKWH;
        }

        RenderFragment? forecastFragment = null;
        if (forecastTotal != null)
        {
            var dampedForecast = Math.Round(forecastTotal.Value * forecastDamping, 2);
            var ForcastDescription = $"Forecast PV for {date:dd-MMM}";

            forecastFragment = @<ValueChip Icon="@Icons.Material.Filled.Timeline" Value="@dampedForecast"
                                           Description="@ForcastDescription" Units="kWh" Decimals="2"/>;
        }

        return @<div class="summary-row">
           <div>
               <DateDisplay Date="@date"/>
           </div>
            <div>
                @forecastFragment
            </div>
        </div>;
    }
    
    private TableGroupDefinition<OctopusPriceSlot> _groupDefinition = new()
    {
        GroupName = "Date",
        Indentation = false,
        Expandable = false,
        IsInitiallyExpanded = true,
        Selector = (e) => e.valid_from.Date
    };
    
    private string ForecastEstimate(OctopusPriceSlot s) => s.pv_est_kwh != null ? 
                        Math.Round(s.pv_est_kwh.Value * forecastDamping, 2).ToString(CultureInfo.InvariantCulture) : string.Empty;

    private string ForecastTooltip(OctopusPriceSlot s) => $"Solcast Power forecast: {s.pv_est_kwh}kW";
    private bool hasSolcastData = false;
    private bool isSimulateMode = false;
    private bool manualOverridesExist = false;
    private decimal forecastDamping = 1M;
    private ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;
    private string PriceStyle(OctopusPriceSlot slot) => $"text-align:center;";
    
    private async Task ClearOverride(OctopusPriceSlot slot)
    {
        var req = new ChangeSlotActionRequest { SlotStart = slot.valid_from, NewAction = slot.PlanAction };
        await inverterManagerService.OverrideSlotAction(req);
        await RefreshData();
        snackBar.Add($"Override cleared for {slot.valid_from:HH:mm}", Severity.Info);
    }
    
    private async Task ChangeSlotAction(ChangeSlotActionRequest req)
    {
        await inverterManagerService.OverrideSlotAction(req);
        await RefreshData();
        snackBar.Add($"Action changed to {req.NewAction.Humanize()} for {req.SlotStart:HH:mm}", Severity.Info);
    }

    private async Task RefreshData()
    {
        // Get the latest data
        await inverterManagerService.RefreshInverterState();
        hasSolcastData = inverterManagerService.InverterState.Prices.Any(x => x.pv_est_kwh != null);
        manualOverridesExist = inverterManagerService.InverterState.Prices.Any(x => x.OverrideAction != null && x.OverrideType == OctopusPriceSlot.SlotOverrideType.Manual);

        StateHasChanged();
    }

    private async Task ClearManualOverrides()
    {
        await inverterManagerService.ClearManualOverrides();
        await RefreshData();
    }

    private async Task AdvanceSimulation()
    {
        await inverterManagerService.AdvanceSimulation();
        await RefreshData();
    }

    private async Task ResetSimulation()
    {
        await inverterManagerService.ResetSimulation();
        await RefreshData();
    }

    private async Task RunTimer()
    {
        while (await timer.WaitForNextTickAsync(tokenSource.Token))
            await RefreshData();
    }

    public void Dispose()
    {
        tokenSource.Cancel();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var config = await inverterManagerService.GetConfig();

        if (config.Simulate != isSimulateMode || config.SolcastDampFactor != forecastDamping)
        {
            isSimulateMode = config.Simulate;
            forecastDamping = config.SolcastDampFactor;
            StateHasChanged();
        }

        await RefreshData();
        _ = RunTimer();

        await base.OnInitializedAsync();
    }
}

@if (ChargePercentage != null && ChargePercentage != 0)
{
    <ToolTipPopover ToolTip="@BatteryToolTip">
        <div class="battery-indicator" title="@BatteryToolTip">
            <div class="battery-box">
                @foreach (var _ in Enumerable.Range(0, fullBlocks))
                {
                    <div class="@BlockStyle(true)"></div>
                }
                @foreach (var _ in Enumerable.Range(0, emptyBlocks))
                {
                    <div class="@BlockStyle(false)"></div>
                }
            </div>
            <div class="charge-percentage">
                @ChargePercentage%
            </div>
        </div>
    </ToolTipPopover>
}

@code {
    [Parameter] public int? ChargePercentage { get; set; }

    [Parameter] public decimal BatteryPowerKW { get; set; }

    [Parameter] public decimal GridImportKW { get; set; }

    int emptyBlocks;
    int fullBlocks;

    private string BatteryToolTip => BatteryPowerKW switch
    {
        // Allow for a tiny bit of grid pull which is basically insignificant
        > 0 => $"Charging from {(GridImportKW > 0.25M ? "grid" : "solar")} at {BatteryPowerKW:F2}kW",
        < 0 => $"Discharging at {Math.Abs(BatteryPowerKW):F2}kW",
        _ => $"Current SOC: {ChargePercentage}%"
    };

    private string FullBlockStyle => "full-block " + ChargePercentage switch
    {
        <= 25 => "full-block-25 ",
        <= 50 => "full-block-50 ",
        <= 75 => "full-block-75 ",
        _ => "full-block-100 ",
    };

    private string ChargeStyle => BatteryPowerKW switch
    {
        0 => "",
        <= 0 => "discharge-block ",
        >= 0 => "charge-block "
    };
    
    private string BlockStyle(bool full) => ChargeStyle + (full ? FullBlockStyle : " empty-block ");

    protected override void OnParametersSet()
    {
        emptyBlocks = 10;
        fullBlocks = 0;

        if (ChargePercentage != null)
        {
            fullBlocks = (int)Math.Round(ChargePercentage.Value / 10.0, MidpointRounding.AwayFromZero);
            emptyBlocks = 10 - fullBlocks;
        }

        base.OnParametersSet();
    }
}
@inject IInverterManagerService inverterManagerService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject NavigationManager navManager

<NavigationLock OnBeforeInternalNavigation="CheckNavigateAway"/>

<MudOverlay DarkBackground="true" Visible="@(!string.IsNullOrEmpty(glassPaneText))">
    <div class="overlay-panel">
        <MudProgressCircular Indeterminate="true" Size="Size.Small"/>
        <text>@glassPaneText</text>
    </div>
</MudOverlay>

<div class="config-settings @DarkModeStyle">
    <h2>Solis Manager Configuration</h2>

    @if (config != null)
    {
        <div class="config-fields">
            <InverterTypeSelector @bind-InverterConfig="config.InverterConfig"/>

            @InverterSettings()

            <ConfigSettingHelp HelpText="Enabling this setting will automatically update the inverter's clock every day at 2am, to avoid time drift">
                <MudCheckBox Label="Auto Update Inverter Time" LabelPlacement="Placement.End" @bind-Value="@config.AutoAdjustInverterTime"/>
            </ConfigSettingHelp>
        </div>
        <div class="config-fields">
            <h5>Octopus Product</h5>
            <ConfigSettingHelp>
                <HelpContent>
                    Set your Octopus API key and account number to ensure the app can periodically update to match the tariff you're on.<br/>
                    If you would rather set the products detail (e.g., to simulate a tariff you're not currently using) then leave
                    the API key and account blank, and specify the Agile product code manually.
                    Note: if you have multiple accounts (e.g., one for export and one for import) you should enter them as a comma-separated
                    list.
                </HelpContent>
                <ChildContent>
                    <MudRadioGroup @bind-Value="@manualProductKey">
                        <MudRadio Size="Size.Small" Value="@false">Use API Key (recommended)</MudRadio>
                        <MudRadio Size="Size.Small" Value="@true">Select Octopus Tariff</MudRadio>
                    </MudRadioGroup>
                </ChildContent>
            </ConfigSettingHelp>
            @if (!manualProductKey)
            {
                <MudTextField T="string" Label="Octopus Account Number" @bind-Value="@config.OctopusAccountNumber" Immediate="true" Variant="UIConstants.MudVariant"/>
                <MudTextField T="string" Label="Octopus API Key" @bind-Value="@config.OctopusAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            }
            else
            {
                <OctopusProductSelector @bind-TariffCode="config.OctopusProductCode" Disabled="@AutomaticAccount"/>
                @if (AutomaticAccount)
                {
                    <div class="tariff-tip">
                        The Octopus Product has been set from your account. To set manually, clear the account/API settings.
                    </div>
                }
            }
        </div>
        @if (config.TariffIsIntelligentGo)
        {
            <div class="config-fields">
                <h5>Intelligent Go options</h5>
                <ConfigSettingHelp HelpText="If your tariff is Intelligent Go, this option will attempt to charge the house battery when daytime cheap dispatch charge slots are provided by Octopus. You can optionally specify the Charge Amps to be used (leave blank for the default global setting)">
                    <MudCheckBox Label="Intelligent Go Charging" @bind-Value="@config.IntelligentGoCharging" class="wrapped-field"
                                 Disabled="@(!config.TariffIsIntelligentGo)"/>
                    <MudNumericField T="int?" @bind-Value="@config.IntelligentGoAmps" Label="IOG Charge Amps"
                                 Disabled="@(!config.TariffIsIntelligentGo)" Variant="UIConstants.MudVariant"/>
                </ConfigSettingHelp>
            </div>
        }
        <div class="config-fields">
            <h5>Solcast Settings</h5>
            <ConfigSettingHelp HelpText="Specify up to two Solcast comma-separated site identifiers (one for each string)">
                <MudTextField T="string" Label="Solcast API Key" @bind-Value="@config.SolcastAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            </ConfigSettingHelp>
            <ConfigSettingHelp HelpText="Set your Solcast Site Identifier here. If you have multiple strings, add the site IDs separated by a comma.">
                <MudTextField T="string" Label="Solcast Site ID / Resource ID" @bind-Value="@config.SolcastSiteIdentifier" Immediate="true" Variant="UIConstants.MudVariant"/>
            </ConfigSettingHelp>
            <ConfigSettingHelp HelpText="Damping factor for Solcast (e.g., if Solcast estimates are double actual yield, set this to 50%). A value of 100% will use the raw solcast data">
                <MudNumericField T="int" Label="Solcast Damping/Reduction %" @bind-Value="@DampingPercentageProxy" Min="0" Max="100" Variant="UIConstants.MudVariant"/>
            </ConfigSettingHelp>
            <ConfigSettingHelp>
                <HelpContent>
                    Solcast has an API rate-limit of 10 calls per day, so solcast data will only be requested just after
                    9am each day, and then again at just after 7pm. This data will be cached (in a file called 
                    <code>Solcast-cache.json</code>). <br/>
                    If you want an additional update at midday to update the solcast forecast as the day progresses, enable 
                    this option. However, note that if you are using Solcast elsewhere (e.g., in Home Assistant) this may 
                    mean that you're more likely to hit your API rate limit.
                </HelpContent>
                <ChildContent>
                    <MudCheckBox Label="Extra Solcast update" LabelPlacement="Placement.End" @bind-Value="@config.SolcastExtraUpdates"/>
                </ChildContent>
            </ConfigSettingHelp>
        </div>
        <div class="config-fields">
            <h5>Forecast Rules</h5>
            <ConfigSettingHelp HelpText="Enable this option and set a threshold for tomorrow's PV forecast. If the forecast is above the threshold, the overnight charge will be skipped.">
                <MudCheckBox Label="No Overnight Charge" @bind-Value="@config.SkipOvernightCharge" LabelPlacement="Placement.End" class="wrapped-field"/>
                <MudNumericField T="decimal" @bind-Value="@config.ForecastThreshold"  Label="If tomorrow's forecast exceeds (kWh)" Min="5" Max="100"
                                 Variant="UIConstants.MudVariant" Disabled="@(!config.SkipOvernightCharge)" class="wrapped-field"/>
                @if (config.SkipOvernightCharge)
                {
                    <MudCheckBox Label="Override Night End" @bind-Value="@ManualNightEnd" @bind-Value:after="ManualNightEndChanged" LabelPlacement="Placement.End" class="wrapped-field"/>
                    @if (ManualNightEnd)
                    {
                        <MudTimePicker @bind-Time="@config.NightEndTime" Label="Night ends at"/>
                    }
                }
            </ConfigSettingHelp>
            @if (config.SkipOvernightCharge)
            {
                <ConfigSettingHelp HelpText="By default the 'night' period will be calculated from sunrise/sunset. If you want to avoid overnight charging until later in the morning, you can override the 'night-end' time here.">
                    <MudCheckBox Label="Override Night End" @bind-Value="@ManualNightEnd" @bind-Value:after="ManualNightEndChanged" LabelPlacement="Placement.End" class="wrapped-field"/>
                    @if (ManualNightEnd)
                    {
                        <MudTimePicker @bind-Time="@config.NightEndTime" Label="Night ends at"/>
                    }
                </ConfigSettingHelp>
            }
        </div>
        <div class="config-fields">
            <h5>Scheduled Actions</h5>
            <ScheduleManager @bind-Actions="@config.ScheduledActions"/>
        </div>
        <div class="config-fields">
            <h5>General/Battery Options</h5>
            <MudSlider @bind-Value="@config.SlotsForFullBatteryCharge" Size="Size.Large" TickMarks="true" ValueLabel="true"
                       Min="1" Max="24" Immediate="true" Variant="UIConstants.MudVariant">
                <ConfigSettingHelp>
                    <HelpContent>This setting tells the app how many slots 30-minute slots of charging will be needed 
                        to go from empty to full. This will depend on your battery size and charging rate.<br/>
                        In a future version of the app will calculate this based on historical charging data, but
                        for now it's a manual setting.
                    </HelpContent>
                    <ChildContent>
                        Charge Slots needed to achieve Full Battery (@(config.SlotsForFullBatteryCharge / 2.0) hours)
                    </ChildContent>
                </ConfigSettingHelp>
            </MudSlider>
            <div class="config-fields">
                <h5>Charging Options</h5>
            </div>
            <div class="config-field-row">
                <ConfigSettingHelp HelpText="Target SOC percentage to be achieved prior to the highest-priced peak period in the day.">
                    <MudNumericField T="int" Label="Battery % for Peak Period" @bind-Value="@PeakPercentageProxy" Min="20" Max="100" 
                                     Variant="UIConstants.MudVariant" class="wrapped-field"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="Ensures that if the price falls below a certain threshold, the battery will be charged regardless of SOC %">
                    <MudNumericField T="int" Label="Always charge below (p/kWh)" @bind-Value="@config.AlwaysChargeBelowPrice" Min="-10" Max="100" 
                                     Variant="UIConstants.MudVariant" class="wrapped-field"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="If the battery is below the specified SOC, will charge regardless of price">
                    <MudNumericField T="int?" Label="Charge if SOC (%) Below" @bind-Value="@config.AlwaysChargeBelowSOC" Min="0" Max="100" 
                                     Clearable="true" Variant="UIConstants.MudVariant" class="wrapped-field"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="If slots are available with below-average prices, they will be used to boost-charge the battery if the SOC is below this value">
                    <MudNumericField T="int" Label="Battery Boost Threshold (%)" @bind-Value="@config.LowBatteryPercentage" Min="1" Max="150" 
                                     Variant="UIConstants.MudVariant" class="wrapped-field"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="Simulation mode allows you to see the charging strategy without actually making changes to the inverter, including stepping forwards through time.">
                    <MudCheckBox Label="Simulation Mode" LabelPlacement="Placement.End" @bind-Value="@config.Simulate"/>
                </ConfigSettingHelp>
            </div>
        </div>
        <div class="button-bar">
            <MudButton OnClick="SaveConfig" Variant="UIConstants.MudVariant" Color="Color.Primary" Disabled="@(!config.IsValid())">Save Settings</MudButton>
            @if (config.IsValid())
            {
                <MudButton OnClick="@TestCharge" Variant="UIConstants.MudVariant" Color="Color.Warning">Save and Test Charge</MudButton>
            }
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback OnSettingsChanged { get; set; }

    [CascadingParameter] protected bool DarkMode { get; set; }
    
    private SolisManagerConfig? config;
    private bool manualProductKey = false;
    private string DarkModeStyle => DarkMode ? "config-settings-dark" : string.Empty;
    private string originalConfigJson = string.Empty;
    private string? glassPaneText = null;

    private bool AutomaticAccount => config != null && !string.IsNullOrEmpty(config.OctopusAccountNumber) && !string.IsNullOrEmpty(config.OctopusAPIKey);
    private bool ManualNightEnd = false;
    
    private int PeakPercentageProxy
    {
        get => (int)(config!.PeakPeriodBatteryUse * 100);
        set => config!.PeakPeriodBatteryUse = value / 100.0M;
    }

    private int DampingPercentageProxy
    {
        get => (int)(config!.SolcastDampFactor * 100);
        set => config!.SolcastDampFactor = value / 100.0M;
    }

    protected override async Task OnInitializedAsync()
    {
        config = await inverterManagerService.GetConfig();
        originalConfigJson = JsonSerializer.Serialize(config);
        ManualNightEnd = config.NightEndTime != null;
        
        await base.OnInitializedAsync();
    }

    private void ManualNightEndChanged()
    {
        ArgumentNullException.ThrowIfNull(config);
        if (ManualNightEnd)
            config.NightEndTime = new TimeSpan(7, 0, 0);
        else
            config.NightEndTime = null;

        StateHasChanged();
    }
    
    private async Task CheckNavigateAway(LocationChangingContext context)
    {
        var newJson = JsonSerializer.Serialize(config);

        if (newJson != originalConfigJson)
        {
            var result = await dialogService.ShowMessageBox("Navigate Away and Lost Changes?", "You have made config changes - do you want to discard them and navigate away?", "Discard", "Cancel");
            if( result == null || !result.Value )
                context.PreventNavigation();
        }
    }

    private async Task SaveConfig()
    {
        try
        {
            glassPaneText = "Saving settings...";
            StateHasChanged();

            if (config != null)
            {
                var response = await inverterManagerService.SaveConfig(config);

                if (response.Success)
                {
                    await OnSettingsChanged.InvokeAsync();

                    snackbar.Add("Config Settings Updated", Severity.Success);
                    originalConfigJson = JsonSerializer.Serialize(config);
                    navManager.NavigateTo("/");
                }
                else
                    snackbar.Add($"Error: {response.Message}", Severity.Error);
            }
        }
        finally
        {
            glassPaneText = null;
            StateHasChanged();
        }
    }

    private async Task TestCharge()
    {
        MarkupString msg = new MarkupString("To validate the inverter configuration, a five-minute test charge will be run on your battery." +
                                            "<br/><br/>This will override existing charging slot settings in the SolisCloud Inverter Control, so if you don't enable " +
                                            "Solis Agile Manager immediately, you'll need to reconfigure them via the SolisCloud app.");
        var result = await dialogService.ShowMessageBox("Run A Test Charge?",
            msg, yesText: "Charge My Battery", cancelText: "Cancel");

        try
        {
            glassPaneText = "Saving settings and applying test charge...";
            StateHasChanged();
            
            if (result != null && result.Value)
            {
                await SaveConfig();
                await inverterManagerService.TestCharge();

                snackbar.Add("Config Settings Updated and Test Charge Initiated", Severity.Warning);
            }
        }
        finally
        {
            glassPaneText = null;
            StateHasChanged();
        }
    }

    private RenderFragment? InverterSettings()
    {
        if (config?.InverterConfig == null)
            return null;
        
        return config.InverterConfig switch
        {
            InverterConfigSolis _ => @<SolisInverterConfig @bind-InverterConfig="config.InverterConfig" />,
            InverterConfigSolarEdge _ => @<SolarEdgeInverterConfig @bind-InverterConfig="config.InverterConfig" />,
            _ => @<div>No config options found for this inverter type. Please raise an issue on Github.</div>
        };
    }
}
@inject IInverterService inverterService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject NavigationManager navManager

<div class="config-settings @DarkModeStyle">
    <h2>Solis Manager Configuration</h2>

    @if (config != null)
    {
        <div class="config-fields">
            <h5>Solis Inverter Settings</h5>
            <MudTextField T="string" Label="Solis API Key" @bind-Value="@config.SolisAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            <MudTextField T="string" Label="Solis API Secret" @bind-Value="@config.SolisAPISecret" Immediate="true" Variant="UIConstants.MudVariant"/>
            <MudTextField T="string" Label="Solis Inverter Serial Number" @bind-Value="@config.SolisInverterSerial" Immediate="true" Variant="UIConstants.MudVariant"/>
            <ConfigSettingHelp HelpText="Enabling this setting will automatically update the inverter's clock every day at 2am, to avoid time drift">
                <MudCheckBox Label="Auto Update Inverter Time" LabelPosition="LabelPosition.End" @bind-Value="@config.AutoAdjustInverterTime"/>
            </ConfigSettingHelp>
        </div>
        <div class="config-fields">
            <h5>Octopus Product</h5>
            <ConfigSettingHelp>
                <HelpContent>
                    Set your Octopus API key and account number to ensure the app can periodically update to match the tariff you're on.<br/>
                    If you would rather set the products detail (e.g., to simulate a tariff you're not currently using) then leave
                    the API key and account blank, and specify the Agile product code manually.
                </HelpContent>
                <ChildContent>
                    <MudRadioGroup @bind-Value="@manualProductKey">
                        <MudRadio Size="Size.Small" Value="@false">Use API Key (recommended)</MudRadio>
                        <MudRadio Size="Size.Small" Value="@true">Select Octopus Tariff</MudRadio>
                    </MudRadioGroup>
                </ChildContent>
            </ConfigSettingHelp>
            @if (!manualProductKey)
            {
                    <MudTextField T="string" Label="Octopus Account Number" @bind-Value="@config.OctopusAccountNumber" Immediate="true" Variant="UIConstants.MudVariant"/>
                    <MudTextField T="string" Label="Octopus API Key" @bind-Value="@config.OctopusAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            }
            else
            {
                <OctopusProductSelector @bind-TariffCode="config.OctopusProductCode" Disabled="@AutomaticAccount"/>
                @if (AutomaticAccount)
                {
                    <div class="tariff-tip">
                        The Octopus Product has been set from your account. To set manually, clear the account/API settings.
                    </div>
                }
            }
        </div>
        <div class="config-fields">
            <h5>Solcast Settings</h5>
            <ConfigSettingHelp HelpText="Specify up to two Solcast comma-separated site identifiers (one for each string)">
                <MudTextField T="string" Label="Solcast API Key" @bind-Value="@config.SolcastAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            </ConfigSettingHelp>
            <MudTextField T="string" Label="Solcast Site ID" @bind-Value="@config.SolcastSiteIdentifier" Immediate="true" Variant="UIConstants.MudVariant"/>
            <ConfigSettingHelp HelpText="Damping factor for Solcast (e.g., if Solcast estimates are double actual yield, set this to 50%). A value of 100% will use the raw solcast data">
                <MudNumericField T="int" Label="Solcast Damping/Reduction %" @bind-Value="@DampingPercentageProxy" Min="0" Max="100" Variant="UIConstants.MudVariant"/>
            </ConfigSettingHelp>
            <ConfigSettingHelp>
                <HelpContent>
                    Solcast has an API rate-limit of 10 calls per day, so solcast data will only be pulled at just after
                    midnight each day, and once more at 9am. This data will be cached (in a file called 
                    <code>Solcast-cache.json</code>). <br/>
                    If you want an additional update at midday to update the solcast forecast as the day progresses, enable 
                    this option. However, note that if you are using Solcast elsewhere (e.g., in Home Assistant) this may 
                    mean that you're more likely to hit your API rate limit.
                </HelpContent>
                <ChildContent>
                    <MudCheckBox Label="Extra Solcast update" LabelPosition="LabelPosition.End" @bind-Value="@config.SolcastExtraUpdates"/>
                </ChildContent>
            </ConfigSettingHelp>
        </div>
        <div class="config-fields">
            <h5>General/Battery Options</h5>
            <MudSlider @bind-Value="@config.SlotsForFullBatteryCharge" Size="Size.Large" TickMarks="true" ValueLabel="true"
                       Min="1" Max="10" Immediate="true" Variant="UIConstants.MudVariant">
                <ConfigSettingHelp>
                    <HelpContent>This setting tells the app how many slots 30-minute slots of charging will be needed 
                        to go from empty to full. This will depend on your battery size and charging rate.<br/>
                        In a future version of the app will calculate this based on historical charging data, but
                        for now it's a manual setting.
                    </HelpContent>
                    <ChildContent>
                        Charge Slots needed to achieve Full Battery (@(config.SlotsForFullBatteryCharge / 2.0) hours)
                    </ChildContent>
                </ConfigSettingHelp>
            </MudSlider>
            <div class="config-field-row">
                <ConfigSettingHelp HelpText="Specifies the maximum charge and discharge rate in Amps">
                    <MudNumericField T="int" Label="Max Charge Rate (Amps)" @bind-Value="@config.MaxChargeRateAmps" Min="5" Max="95" Variant="UIConstants.MudVariant"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="Target SOC percentage to be achieved prior to the highest-priced peak period in the day.">
                    <MudNumericField T="int" Label="Battery % for Peak Period" @bind-Value="@PeakPercentageProxy" Min="20" Max="100" Variant="UIConstants.MudVariant"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="Ensures that if the battery falls below a certain threshold, it will be charged regardless of price">
                    <MudNumericField T="int" Label="Always charge below (p/kWh)" @bind-Value="@config.AlwaysChargeBelowPrice" Min="-10" Max="100" Variant="UIConstants.MudVariant"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="If the battery is below the specified SOC, will charge regardless of price">
                    <MudNumericField T="int?" Label="Charge if battery is below SOC (%)" @bind-Value="@config.AlwaysChargeBelowSOC" Min="0" Max="100" Clearable="true" Variant="UIConstants.MudVariant"/>
                </ConfigSettingHelp>
                <ConfigSettingHelp HelpText="If slots are available with below-average prices, they will be used to boost-charge the battery if the SOC is below this value">
                    <MudNumericField T="int" Label="Battery Boost Threshold (%)" @bind-Value="@config.LowBatteryPercentage" Min="1" Max="95" Variant="UIConstants.MudVariant"/>
                </ConfigSettingHelp>
                <MudCheckBox Label="Simulate (no inverter changes)" LabelPosition="LabelPosition.End" @bind-Value="@config.Simulate"/>
            </div>
            <ScheduleManager/>
        </div>
        <div class="button-bar">
            <MudButton OnClick="SaveConfig" Variant="UIConstants.MudVariant" Color="Color.Primary" Disabled="@(!config.IsValid())">Save Settings</MudButton>
            @if (config.IsValid())
            {
                <MudButton OnClick="@TestCharge" Variant="UIConstants.MudVariant" Color="Color.Warning">Save and Test Charge</MudButton>
            }
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback OnSettingsChanged { get; set; }

    [CascadingParameter] protected bool DarkMode { get; set; }
    
    private SolisManagerConfig? config;
    private bool manualProductKey = false;
    private string DarkModeStyle => DarkMode ? "config-settings-dark" : string.Empty;

    private bool AutomaticAccount => config != null && !string.IsNullOrEmpty(config.OctopusAccountNumber) && !string.IsNullOrEmpty(config.OctopusAPIKey);
    
    private int PeakPercentageProxy
    {
        get => (int)(config!.PeakPeriodBatteryUse * 100);
        set => config!.PeakPeriodBatteryUse = value / 100.0M;
    }

    private int DampingPercentageProxy
    {
        get => (int)(config!.SolcastDampFactor * 100);
        set => config!.SolcastDampFactor = value / 100.0M;
    }

    protected override async Task OnInitializedAsync()
    {
        config = await inverterService.GetConfig();
        await base.OnInitializedAsync();
    }

    private async Task SaveConfig()
    {
        if (config != null)
        {
            var response = await inverterService.SaveConfig(config);

            if (response.Success)
            {
                await OnSettingsChanged.InvokeAsync();

                snackbar.Add("Config Settings Updated", Severity.Info);
                navManager.NavigateTo("/");
            }
            else
                snackbar.Add($"Error: {response.Message}", Severity.Error);
        }
    }

    private async Task TestCharge()
    {
        MarkupString msg = new MarkupString("To validate the inverter configuration, a five-minute test charge will be run on your battery." +
                                            "<br/><br/>This will override existing charging slot settings in the SolisCloud Inverter Control, so if you don't enable " +
                                            "Solis Agile Manager immediately, you'll need to reconfigure them via the SolisCloud app.");
        var result = await dialogService.ShowMessageBox("Run A Test Charge?",
            msg, yesText: "Charge My Battery", cancelText: "Cancel");

        if (result != null && result.Value)
        {
            await SaveConfig();
            await inverterService.TestCharge();

            snackbar.Add("Config Settings Updated and Test Charge Initiated", Severity.Warning);
            navManager.NavigateTo("/");
        }
    }
}
@inject IInverterService inverterService

<div class="config-settings">

    <h1>Solis Manager Configuration</h1>

    @if (config != null)
    {
        <div class="config-fields">
            <h5>Solis Inverter Settings</h5>
            <MudTextField T="string" Label="Solis API Key" @bind-Value="@config.SolisAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            <MudTextField T="string" Label="Solis API Secret" @bind-Value="@config.SolisAPISecret" Immediate="true" Variant="UIConstants.MudVariant"/>
            <MudTextField T="string" Label="Solis Inverter Serial Number" @bind-Value="@config.SolisInverterSerial" Immediate="true" Variant="UIConstants.MudVariant"/>
        </div>
        <div class="config-fields">
            <h5>Octopus Product</h5>
            <MudTextField T="string" Label="Octopus Product" @bind-Value="@config.OctopusProduct" Immediate="true" Variant="UIConstants.MudVariant"/>
            <MudTextField T="string" Label="Octopus Product Code" @bind-Value="@config.OctopusProductCode" Immediate="true" Variant="UIConstants.MudVariant"/>
        </div>
        <div class="config-fields">
            <h5>Solcast Settings</h5>
            <MudTextField T="string" Label="Solcast API Key" @bind-Value="@config.SolcastAPIKey" Immediate="true" Variant="UIConstants.MudVariant"/>
            <MudTextField T="string" Label="Solcast Site ID" @bind-Value="@config.SolcastSiteIdentifier" Immediate="true" Variant="UIConstants.MudVariant"/>
        </div>
        <div class="config-fields">
            <h5>General/Battery Options</h5>
            <MudSlider @bind-Value="@config.SlotsForFullBatteryCharge" Size="Size.Large" TickMarks="true" ValueLabel="true"
                       Min="1" Max="10" Immediate="true" Variant="UIConstants.MudVariant">
                Charge Slots needed to achieve Full Battery (@(config.SlotsForFullBatteryCharge/2.0) hours)
            </MudSlider>
            <div class="config-field-row">
                <MudNumericField T="int" Label="Always charge below (p/kWh)" @bind-Value="@config.AlwaysChargeBelowPrice" Min="0" Max="15" Variant="UIConstants.MudVariant"/>
                <MudNumericField T="int" Label="Low Battery Threshold (%)" @bind-Value="@config.LowBatteryPercentage" Min="1" Max="50" Variant="UIConstants.MudVariant"/>
                <MudNumericField T="int" Label="Max Charge Rate (Amps)" @bind-Value="@config.MaxChargeRateAmps" Min="5" Max="95" Variant="UIConstants.MudVariant"/>
                <MudCheckBox Label="Simulate (no inverter changes)" LabelPosition="LabelPosition.End" @bind-Value="@config.Simulate"/>
            </div>
        </div>
        <div class="button-bar">
            <MudButton OnClick="SaveConfig" Variant="UIConstants.MudVariant" Color="Color.Primary" Disabled="@(!config.IsValid())">Save Settings</MudButton>
            @if (config.IsValid())
            {
                <MudButton OnClick="@inverterService.TestCharge" Variant="UIConstants.MudVariant" Color="Color.Warning">Test Charge (5 minutes)</MudButton>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnSettingsChanged { get; set; }
    
    private SolisManagerConfig? config;
    
    protected override async Task OnInitializedAsync()
    {
        config = await inverterService.GetConfig();
        await base.OnInitializedAsync();
    }

    private async Task SaveConfig()
    {
        await inverterService.SaveConfig(config);
        await OnSettingsChanged.InvokeAsync();
    }
}
@inject IInverterManagerService inverterManagerService

<PageTitle>Solis Manager</PageTitle>

<ErrorBoundary>
    <TopStatusBar PageTitle="Consumption"/>

    @if(!accountValid)
    {
        <div>Please configure your Octopus API Key and Account number in the settings screen to see consumption data.</div>
    }
    else if( loading || consumptionData == null)
    {
        <ProgressIndicator ProgressText="Loading price Data..."/>
    }
    else
    {
        @foreach (var data in consumptionData)
        {
            <div>@data.PeriodStart - @data.ImportConsumption, @data.ExportConsumption</div>
        }
    }
</ErrorBoundary>

@code {
    private bool accountValid;
    private bool loading = true;
    private SolisManagerConfig? config;
    private IEnumerable<OctopusConsumption>? consumptionData = null;

    private async Task RecalcConsmption()
    {
        var end = DateTime.UtcNow.AddDays(-1);
        var start = end.AddDays(-30);
        consumptionData = await inverterManagerService.GetConsumption(start, end);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        config = await inverterManagerService.GetConfig();
        accountValid = !string.IsNullOrEmpty(config.OctopusAPIKey) && !string.IsNullOrEmpty(config.OctopusAccountNumber);
        
        await RecalcConsmption();

        loading = false;
        StateHasChanged();

        await base.OnInitializedAsync();
    }
}
@inject IInverterManagerService inverterManagerService

<PageTitle>Solis Manager</PageTitle>

<ErrorBoundary>
    <TopStatusBar PageTitle="Consumption" @bind-SelectedView="selectedView" ViewSettingName="cost-view"/>

    @if(accountValid != null &&!accountValid.Value)
    {
        <div>Please configure your Octopus API Key and Account number in the settings screen to see consumption data.</div>
    }
    else if( loading || consumptionData == null)
    {
        <ProgressIndicator ProgressText="Loading consumption and tariff data..."/>
    }
    else
    {
        @if (selectedView == ViewSelector.ViewType.Chart)
        {
            <ConsumptionChart ChartData="consumptionData"/>
        }
        else
        {
            <MudTable Items="consumptionData.OrderByDescending(x => x.PeriodStart)" Dense="true"
                      Breakpoint="Breakpoint.None" GroupBy="_groupDefinition">
                <HeaderContent>
                    <MudTh>Period</MudTh>
                    <MudTh>Tariff</MudTh>
                    <MudTh>Import (kWh)</MudTh>
                    <MudTh>Import Price (p/kWh)</MudTh>
                    <MudTh>Export (kWh)</MudTh>
                    <MudTh>Import Cost (£)</MudTh>
                    <MudTh>Export Price (p/kWh)</MudTh>
                    <MudTh>Export Profit (£)</MudTh>
                    <MudTh>Net Cost (£)</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group date-row">
                        <DateDisplay Date="@((DateTime?)context.Key)"/>
                    </MudTh>
                    <MudTd>@context.Items.FirstOrDefault()?.Tariff)</MudTd>
                    <MudTd>@Math.Round(context.Items.Sum(x => x.ImportConsumption), 2)</MudTd>
                    <MudTd>@Math.Round(WeightedAverage(context.Items, x => x.ImportPrice), 2)</MudTd>
                    <MudTd>
                        <Price Value="@(context.Items.Sum(x => x.ImportCost) / 100M)"/>
                    </MudTd>
                    <MudTd>@Math.Round(context.Items.Sum(x => x.ExportConsumption), 2)</MudTd>
                    <MudTd>@Math.Round(WeightedAverage(context.Items, x => x.ExportPrice), 2)</MudTd>
                    <MudTd>
                        <Price Value="@(context.Items.Sum(x => x.ExportProfit) / 100m)"/>
                    </MudTd>
                    <MudTd>
                        <Price Value="@(context.Items.Sum(x => x.NetCost) / 100M)"
                               Colours="Price.ColorType.PositiveRed"/>
                    </MudTd>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd>@context.PeriodStart.DisplayDateTime()</MudTd>
                    <MudTd>@context.Tariff</MudTd>
                    <MudTd>@Math.Round(context.ImportConsumption, 2)</MudTd>
                    <MudTd>@Math.Round(context.ImportPrice, 2)</MudTd>
                    <MudTd>
                        <Price Value="@(context.ImportCost / 100M)"/>
                    </MudTd>
                    <MudTd>@Math.Round(context.ExportConsumption, 2)</MudTd>
                    <MudTd>@Math.Round(context.ExportPrice, 2)</MudTd>
                    <MudTd>
                        <Price Value="@(context.ExportProfit / 100M)"/>
                    </MudTd>
                    <MudTd>
                        <Price Value="@(context.NetCost / 100M)" Colours="Price.ColorType.PositiveRed"/>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

        <div><strong>Note:</strong> Consumption costs are currently shown without the standing charge.</div>
    }
</ErrorBoundary>

@code {
    private bool? accountValid = null;
    private bool loading = true;
    private SolisManagerConfig? config;
    private IEnumerable<OctopusConsumption>? consumptionData = null;
    private ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;

    private decimal WeightedAverage(IEnumerable<OctopusConsumption> rates, Func<OctopusConsumption, decimal> selector)
    {
        var nonZeroRates = rates.Where(x => selector(x) > 0.05M).ToList();
        if (nonZeroRates.Any())
            return nonZeroRates.Average(selector);

        return 0;
    }
    
    private TableGroupDefinition<OctopusConsumption> _groupDefinition = new()
    {
        GroupName = "Period",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.PeriodStart.Date
    };
    
    private async Task RecalcConsmption()
    {
        var end = DateTime.UtcNow;
        var start = end.AddDays(-30);
        consumptionData = await inverterManagerService.GetConsumption(start, end);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        config = await inverterManagerService.GetConfig();
        accountValid = !string.IsNullOrEmpty(config.OctopusAPIKey) && !string.IsNullOrEmpty(config.OctopusAccountNumber);
        
        await RecalcConsmption();

        loading = false;
        StateHasChanged();

        await base.OnInitializedAsync();
    }
}
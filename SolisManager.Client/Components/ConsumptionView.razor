@inject IInverterManagerService inverterManagerService

<PageTitle>Solis Manager</PageTitle>

<ErrorBoundary>
    <TopStatusBar PageTitle="Consumption"/>

    @if(!accountValid)
    {
        <div>Please configure your Octopus API Key and Account number in the settings screen to see consumption data.</div>
    }
    else if( loading || consumptionData == null)
    {
        <ProgressIndicator ProgressText="Loading price Data..."/>
    }
    else
    {
         <MudTable Items="consumptionData.OrderByDescending(x => x.PeriodStart)" Dense="true" Breakpoint="Breakpoint.None">
            <HeaderContent>
                <MudTh>Period</MudTh>
                <MudTh>Tariff</MudTh>
                <MudTh>Import (kWh)</MudTh>
                <MudTh>Import Price (p/kWh)</MudTh>
                <MudTh>Export (kWh)</MudTh>
                <MudTh>Export Price (p/kWh)</MudTh>
                <MudTh>Net Cost</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.PeriodStart</MudTd>
                <MudTd>@context.Tariff</MudTd>
                <MudTd>@Math.Round((decimal)context.ImportConsumption, 2)</MudTd>
                <MudTd>@Math.Round(context.ImportPrice, 2)</MudTd>
                <MudTd>@Math.Round((decimal)context.ExportConsumption, 2)</MudTd>
                <MudTd>@Math.Round(context.ExportPrice, 2)</MudTd>
                <MudTd>@Math.Round(context.Cost, 2)</MudTd>
            </RowTemplate>
        </MudTable>
    }
</ErrorBoundary>

@code {
    private bool accountValid;
    private bool loading = true;
    private SolisManagerConfig? config;
    private IEnumerable<OctopusConsumption>? consumptionData = null;

    private async Task RecalcConsmption()
    {
        var start = new DateTime(2025, 2, 13, 9, 0, 0);
        var end = start.AddDays(4);
        consumptionData = await inverterManagerService.GetConsumption(start, end);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        config = await inverterManagerService.GetConfig();
        accountValid = !string.IsNullOrEmpty(config.OctopusAPIKey) && !string.IsNullOrEmpty(config.OctopusAccountNumber);
        
        await RecalcConsmption();

        loading = false;
        StateHasChanged();

        await base.OnInitializedAsync();
    }
}
@inject IInverterManagerService inverterManagerService
@implements IDisposable

<PageTitle>Solis Manager</PageTitle>

<ErrorBoundary>
    <TopStatusBar PageTitle="Costs" @bind-SelectedView="selectedView" ViewSettingName="cost-view">
        <ChildContent>
            <div class="consumption-header">
                <MudSelect T="DateRange" @bind-Value="selectedDateRange" @bind-Value:after="RecalcConsmption" Label="Range" 
                           Dense="true" Variant="UIConstants.MudVariant" Margin="Margin.Dense">
                    @foreach (var range in DateRanges)
                    {
                        <MudSelectItem T="DateRange" Value="@range">@range.desc</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="GroupByType" @bind-Value="selectedGrouping" @bind-Value:after="RecalcConsmption" 
                           Label="Group By" Dense="true" Variant="UIConstants.MudVariant" Margin="Margin.Dense">
                    @foreach (var group in Enum.GetValues<GroupByType>())
                    {
                        <MudSelectItem T="GroupByType" Value="@group">@group.Humanize()</MudSelectItem>
                    }
                </MudSelect>
                <div class="total-cost">Total: <Price Value="@TotalNetCost" Colours="Price.ColorType.PositiveRed" /></div>
            </div>
        </ChildContent>
    </TopStatusBar>

    @if(accountValid != null &&!accountValid.Value)
    {
        <div class="no-account-warning">
            <div>
                Please configure your Octopus API Key and Account number<br/>
                in the <a href="/config">settings screen</a> to see consumption data.
            </div>
        </div>
    }
    else if( loading || consumptionData == null)
    {
        <ProgressIndicator ProgressText="@ProgressMessage"/>
    }
    else
    {
        @if (selectedView == ViewSelector.ViewType.Chart)
        {
            <ConsumptionChart ChartData="consumptionData"/>
        }
        else
        {
            <MudTable Items="consumptionData" Dense="true" Breakpoint="Breakpoint.None">
                <HeaderContent>
                    <MudTh>Period</MudTh>
                    <MudTh>Tariff</MudTh>
                    <MudTh>Standing Charge</MudTh>
                    <MudTh>Imported (kWh)</MudTh>
                    <MudTh>Import Price Paid (p/kWh)</MudTh>
                    <MudTh>Import Cost (£)</MudTh>
                    <MudTh>Exported (kWh)</MudTh>
                    <MudTh>Export Price Earned (p/kWh)</MudTh>
                    <MudTh>Export Profit (£)</MudTh>
                    <MudTh>Net Cost (£)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><DateDisplay Date="@context.StartTime"/></MudTd>
                    <MudTd>@context.Tariffs</MudTd>
                    <MudTd>@Math.Round(context.AverageStandingCharge, 2)</MudTd>
                    <MudTd>@Math.Round(context.TotalImport, 2)</MudTd>
                    <MudTd>@Math.Round(context.AverageImportPrice, 2)</MudTd>
                    <MudTd><Price Value="@(context.TotalImportCost)"/></MudTd>
                    <MudTd>@Math.Round(context.TotalExport, 2)</MudTd>
                    <MudTd>@Math.Round(context.AverageExportPrice, 2)</MudTd>
                    <MudTd><Price Value="@(context.TotalExportProfit)"/></MudTd>
                    <MudTd><Price Value="@(context.NetCost)" Colours="Price.ColorType.PositiveRed"/></MudTd>
                </RowTemplate>
            </MudTable>
        }

        <div><strong>Note:</strong> Consumption costs are currently shown without the standing charge.</div>
    }
</ErrorBoundary>

@code {
    private bool? accountValid = null;
    private bool loading = true;
    private SolisManagerConfig? config;
    private IEnumerable<GroupedConsumption>? consumptionData = null;
    private ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;
    private CancellationTokenSource tokenSource = new();
    private string ProgressMessage => $"Loading {selectedDateRange.Length} days of consumption and tariff data..." + 
                                      (selectedDateRange.Length <= 30 ? string.Empty : " Please be patient, this may take some time.");
    private GroupByType selectedGrouping = GroupByType.Day;
    private DateRange selectedDateRange = DateRanges.First(x => x.desc == "30 days");

    private record DateRange(string desc, DateTime start, DateTime end)
    {
        public int Length => (int)(end - start).TotalDays;
    }
    
    private static readonly DateRange[] DateRanges =
    [
        new ("1 week", DateTime.UtcNow.AddDays(-7), DateTime.UtcNow),
        new ("2 weeks", DateTime.UtcNow.AddDays(-14), DateTime.UtcNow),
        new ("30 days", DateTime.UtcNow.AddDays(-30), DateTime.UtcNow),
        new ("60 days", DateTime.UtcNow.AddDays(-60), DateTime.UtcNow),
        new ("3 months", DateTime.UtcNow.AddDays(-90), DateTime.UtcNow),
        new ("6 months", DateTime.UtcNow.AddMonths(-6), DateTime.UtcNow),
        new ("1 year", DateTime.UtcNow.AddYears(-1), DateTime.UtcNow),
        new ("This year", new DateTime(DateTime.UtcNow.Year, 1, 1), DateTime.UtcNow),
        new ("Last year", new DateTime(DateTime.UtcNow.Year - 1, 1, 1), new DateTime(DateTime.UtcNow.Year -1, 12, 31, 23, 59, 59)),
    ];

    private string TariffSummary(OctopusConsumption? item) => $"{item?.Tariff}" + (item?.DailyStandingCharge != null ? $" ({item.DailyStandingCharge:F2}p/day)" : string.Empty);
    private decimal TotalNetCost => consumptionData?.Sum(x => x.NetCost) ?? 0M;
    
    public void Dispose()
    {
        tokenSource.Cancel();
    }

    private async Task RecalcConsmption()
    {
        loading = true;
        StateHasChanged();

        tokenSource.Cancel();
        tokenSource = new();
        
        // Consumption data is rarely available before 2pm so if it's before 
        // that skip 2 days. Otherwise go back one day. 
        // that skip 2 days. Otherwise go back one day. 
        // Even then, export data may not be available...
        int offset = DateTime.UtcNow.Hour < 14 ? -2 : -1;
        
        var end = selectedDateRange.end.AddDays(offset);
        var start = selectedDateRange.start.AddDays(offset);
        consumptionData = await inverterManagerService.GetConsumption(start, end, selectedGrouping, tokenSource.Token);
        
        loading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        config = await inverterManagerService.GetConfig();
        accountValid = !string.IsNullOrEmpty(config.OctopusAPIKey) && !string.IsNullOrEmpty(config.OctopusAccountNumber);
        
        await RecalcConsmption();

        await base.OnInitializedAsync();
    }
}
@using Humanizer
@using SolisManager.Client.Layout
@inject IInverterService clientInverterService
@inject IDialogService dialogService

<PageTitle>Solis Manager</PageTitle>

<div class="title-bar">
    <h5>Historical Actions</h5>
    <ViewSelector @bind-SelectedView="selectedView" SettingName="history-view"/>
</div>

@if (historyEntries == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (selectedView == ViewSelector.ViewType.Chart)
    {
        <HistoryGraph HistoryData="historyEntries"/>
    }
    else
    {
        <MudTable Items="historyEntries.OrderByDescending(x => x.Start)" Dense="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Period</MudTh>
                <MudTh>Price (p/kWh)</MudTh>
                <MudTh>Battery SOC</MudTh>
                <MudTh>Forecast (kWh)</MudTh>
                <MudTh>Action Taken</MudTh>
                <MudTh>Explanation</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Start.ToString("dd-MMM-yyyy")</MudTd>
                <MudTd>@context.Start.ToString("HH:mm") - @context.End.ToString("HH:mm")</MudTd>
                <MudTd>@Math.Round(context.Price, 2)</MudTd>
                <MudTd>@Math.Round((decimal)context.BatterySOC, 2)%</MudTd>
                <MudTd>@Math.Round(GetDampedForecast(context), 2)</MudTd>
                <MudTd>@context.Action.Humanize()</MudTd>
                <MudTd>@context.Reason</MudTd>
            </RowTemplate>
        </MudTable>
    }
}

@code {
    IEnumerable<HistoryEntry>? historyEntries = null;
    ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;
    SolisManagerConfig? config;

    private decimal GetDampedForecast(HistoryEntry entry) => entry.ForecastKWH * (config?.SolcastDampFactor ?? 1);

    protected override async Task OnInitializedAsync()
    {
        config = await clientInverterService.GetConfig();
        historyEntries = await clientInverterService.GetHistory();

        await base.OnInitializedAsync();
    }
}
@using Humanizer
@using SolisManager.Client.Layout
@using SolisManager.Shared.Interfaces
@inject IInverterManagerService clientInverterManagerService
@inject IDialogService dialogService

<PageTitle>Solis Manager</PageTitle>

<TopStatusBar PageTitle="History" @bind-SelectedView="selectedView" ViewSettingName="history-view"/>

@if (historyEntries == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (selectedView == ViewSelector.ViewType.Chart)
    {
        <HistoryGraph HistoryData="historyEntries"/>
    }
    else
    {
        <MudTable Items="historyEntries.OrderByDescending(x => x.Start)" Dense="true" Breakpoint="Breakpoint.None"
                  GroupBy="_groupDefinition" >
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Period</MudTh>
                <MudTh>Price (p/kWh)</MudTh>
                <MudTh>Battery SOC</MudTh>
                <MudTh>Forecast PV (kWh)</MudTh>
                <MudTh>Actual PV (kWh)</MudTh>
                <MudTh>Imported (kWh)</MudTh>
                <MudTh>Exported (kWh)</MudTh>
                <MudTh>House Load (kWh)</MudTh>
                <MudTh>Action Taken</MudTh>
                <MudTh>Explanation</MudTh>
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group date-row">
                    <DateDisplay Date="@((DateTime?)context.Key)"/>
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row"></MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row" title="Average price">
                    @Math.Round(context.Items.Average(x => x.Price), 2)
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row"></MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row" title="Total Forecast">
                    @Math.Round(context.Items.Sum(GetDampedForecast), 2)
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row" title="Total Actual PV">
                    @context.Items.Sum(x => x.ActualKWH)
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row" title="Total Imported">
                    @context.Items.Sum(x => x.ImportedKWH)
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row" title="Total Exported">
                    @context.Items.Sum(x => x.ExportedKWH)
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row" title="Total house energy consumption">
                    @context.Items.Sum(x => x.HouseLoadKWH)
                </MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row"></MudTh>
                <MudTh Class="mud-table-cell-custom-group date-row"></MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd Style="white-space: nowrap;">@context.Start.ToString("dd-MMM-yyyy")</MudTd>
                <MudTd Style="white-space: nowrap;">@context.Start.ToString("HH:mm") - @context.End.ToString("HH:mm")</MudTd>
                <MudTd>@Math.Round(context.Price, 2)</MudTd>
                <MudTd>@Math.Round((decimal)context.BatterySOC, 2)%</MudTd>
                <MudTd>@Math.Round(GetDampedForecast(context), 2)</MudTd>
                <MudTd>@Math.Round(context.ActualKWH, 2)</MudTd>
                <MudTd>@Math.Round(context.ImportedKWH, 2)</MudTd>
                <MudTd>@Math.Round(context.ExportedKWH, 2)</MudTd>
                <MudTd>@Math.Round(context.HouseLoadKWH, 2)</MudTd>
                <MudTd>@context.Action.Humanize()</MudTd>
                <MudTd>@context.Reason</MudTd>
            </RowTemplate>
        </MudTable>
    }
}

@code {
    IEnumerable<HistoryEntry>? historyEntries = null;
    ViewSelector.ViewType selectedView = ViewSelector.ViewType.Grid;
    SolisManagerConfig? config;

    private TableGroupDefinition<HistoryEntry> _groupDefinition = new()
    {
        GroupName = "Date",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.Start.Date
    };

    private decimal GetDampedForecast(HistoryEntry entry) => entry.ForecastKWH * (config?.SolcastDampFactor ?? 1);

    protected override async Task OnInitializedAsync()
    {
        config = await clientInverterManagerService.GetConfig();
        historyEntries = await clientInverterManagerService.GetHistory();

        await base.OnInitializedAsync();
    }
}
@inject ISnackbar snackbar

@if (InverterState != null && InverterState.InverterDataTimestamp != DateTime.MinValue)
{
    <div class="@Style">
        Last Update: @InverterState.LastUpdate.ToLocalTime().DisplayDateTime(),
        <text>
            Inverter Data date: @InverterState.InverterDataTimestamp.DisplayDateTime()
            @if (DataAgeMins > staleThresholdMins)
            {
                <span class="@StaleStyle" title="@($"Data is {(int)DataAgeMins} minutes old")">
                    (stale)
                </span>
            }
        </text>,
        last Octopus Rates update: @InverterState.PricesUpdate.ToLocalTime().DisplayDateTime(),
        last Solcast update: @SolcastUpdate,
        @SunriseTime
        @SunsetTime
        <span style="@EEPROMWriteColour">
            @InverterWrites
        </span>
    </div>
}

@code {
    [Parameter] public SolisManagerState? InverterState { get; set; }
    
    [CascadingParameter] public bool DarkMode { get; set; }

    private string EEPROMWriteColour = string.Empty;

    protected override void OnParametersSet()
    {
        const int warningThreshold = 30;
        
        if (InverterState != null && InverterState.DailyEepromWrites > warningThreshold)
        {
            var color = DarkMode ? "orange" : "darkred";
            EEPROMWriteColour = $"color: {color}; font-weight: bold";
            snackbar.Add($"Warning - Daily EEPROM Writes ({InverterState.DailyEepromWrites} is high. Please check the logs", Severity.Warning, 
                x =>
                {
                    x.HideTransitionDuration = 120 * 1000;
                });
        }
        else
            EEPROMWriteColour = string.Empty;

        base.OnParametersSet();
    }

    // We update every from the inverter every minute, solis updates every 5.
    // So worst case we should always have data within 7 minutes. If it's
    // later than that, consider it stale.
    const int staleThresholdMins = 7;

    private double DataAgeMins => (DateTime.UtcNow - InverterState!.InverterDataTimestamp).TotalMinutes; 
    private string Style => "update-text " + (DarkMode ? "update-text-dark" : string.Empty);
    private string StaleStyle => "stale-data " + (DarkMode ? "stale-data-dark" : string.Empty);
    private string SolcastUpdate => InverterState?.SolcastTimeStamp?.ToLocalTime().DisplayDateTime() ?? "never";
    private string SunriseTime => InverterState?.Sunrise != null ? $"Sunrise: {InverterState?.Sunrise:hh\\:mm}," : string.Empty;
    private string SunsetTime => InverterState?.Sunset != null ? $"Sunset: {InverterState?.Sunset:hh\\:mm}" : string.Empty;
    private string InverterWrites => InverterState?.DailyEepromWrites != null ? $"EEPROM enWrites: {InverterState?.DailyEepromWrites}" : "none";
}
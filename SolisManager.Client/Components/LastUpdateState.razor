
@if (InverterState != null && InverterState.InverterDataTimestamp != DateTime.MinValue)
{
    <div class="@Style">
        Last Update: @InverterState.LastUpdate.DisplayDateTime(),
        Inverter Data date: @InverterState.InverterDataTimestamp.DisplayDateTime(),
        @if (DataAgeMins > staleThresholdMins)
        {
            <span class="@StaleStyle" title="@($"Data is {(int)DataAgeMins} minutes old")">
                (stale)
            </span>
        }
        , last Octopus Rates update: @InverterState.PricesUpdate.DisplayDateTime(),
        last Solcast update: @SolcastUpdate
    </div>
}

@code {
    [Parameter] public SolisManagerState? InverterState { get; set; }
    
    [CascadingParameter] public bool DarkMode { get; set; }

    // We update every from the inverter every minute, solis updates every 5.
    // So worst case we should always have data within 7 minutes. If it's
    // later than that, consider it stale.
    const int staleThresholdMins = 7;

    private double DataAgeMins => (DateTime.UtcNow - InverterState!.InverterDataTimestamp).TotalMinutes; 
    private string Style => "update-text " + (DarkMode ? "update-text-dark" : string.Empty);
    private string StaleStyle => "stale-data " + (DarkMode ? "stale-data-dark" : string.Empty);
    private string SolcastUpdate => InverterState?.SolcastTimeStamp?.DisplayDateTime() ?? "never";
}
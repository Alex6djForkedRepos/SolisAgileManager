@using ApexCharts
@inject IInverterService clientInverterService

<PageTitle>Solis Manager</PageTitle>

<div class="title-bar">
    <h5>Comparison</h5>
</div>

@if (comparison == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="chart-area">
        <ApexChart @ref="chart"
                   TItem="OctopusPriceSlot"
                   XAxisType="XAxisType.Datetime"
                   Options="@options"
                   Height="@("100%")"
                   FormatYAxisLabel="@FormatYAxisLabel">

            <ApexPointSeries TItem="OctopusPriceSlot"
                             Items="comparison.TariffAPrices"
                             Name="@comparison.TariffA"
                             XValue="@(e => e.valid_from)"
                             YValue="@(e => e.value_inc_vat)"
                             SeriesType="SeriesType.Line"
                             Color="blue"
                             Stroke="@(new SeriesStroke { Color = "blue", Width = 3 })"/>
            
            <ApexPointSeries TItem="OctopusPriceSlot"
                             Items="comparison.TariffBPrices"
                             Name="@comparison.TariffB"
                             XValue="@(e => e.valid_from)"
                             YValue="@(e => e.value_inc_vat)"
                             SeriesType="SeriesType.Line"
                             Color="red"
                             Stroke="@(new SeriesStroke { Color = "red", Width = 3 })"/>
        </ApexChart>
    </div>
}

@code {
    Shared.Models.TariffComparison? comparison;
    string? currentTariff;
    private ApexChart<OctopusPriceSlot>? chart;
    private ApexChartOptions<OctopusPriceSlot>? options;
    private string FormatYAxisLabel(decimal val) => val == (int)val ? $"{val:F0}" : $"{val:F2}";
    private bool doneZoom = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (comparison != null && chart != null && !doneZoom)
        {
            doneZoom = true;
            var maxA = comparison.TariffAPrices.Max(x => x.valid_to);
            var maxB = comparison.TariffBPrices.Max(x => x.valid_to);

            var closest = new List<DateTime>{ maxA, maxB }.Min(x => x);
            
            await chart.ZoomXAsync(DateTime.UtcNow.ToUnixTimeMilliseconds(), 
                closest.ToUnixTimeMilliseconds());

        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
    
    protected override async Task OnInitializedAsync()
    {
        var config = await clientInverterService.GetConfig();
        currentTariff = config.OctopusProductCode;

        comparison = await clientInverterService.GetTariffComparisonData(currentTariff, "E-1R-AGILE-BB-24-10-01-J");
        InitOptions();
        
        await base.OnInitializedAsync();
    }
    
    protected void InitOptions()
    {
        var yAxis = new List<YAxis>();

        yAxis.Add(new YAxis
        {
            Title = new AxisTitle { Text = "Price (p/kWh)" },
            SeriesName = "Price",
            DecimalsInFloat = 2
        });
        
        options = new ApexChartOptions<OctopusPriceSlot>
        {
            Yaxis = yAxis,
            Chart = new Chart
            { 
                Toolbar = new Toolbar
                {
                    Show = true,
                    Tools = new Tools
                    {
                        Download = false
                    }
                }
            },
        };
    }
}
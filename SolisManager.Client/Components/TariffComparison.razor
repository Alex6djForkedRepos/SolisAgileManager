@inject IInverterManagerService inverterManagerService

<PageTitle>Solis Manager</PageTitle>

<ErrorBoundary>
    <TopStatusBar PageTitle="Comparison">
        <ChildContent>
            @if (!loading)
            {
                <OctopusProductSelector @bind-TariffCode="@selectedTariff" @bind-TariffCode:after="@RecalcNewComparison"
                                        RegionCode="@currentTariff?.Last()" RegionClearable="false"/>
            }
            else
            {
                <div>Loading Octopus tariff data...</div>
            }
        </ChildContent>
    </TopStatusBar>

    @if (comparison != null)
    {
            <ComparisonChart FirstName="@($"Current Tariff ({currentTariff})")" FirstSeries="comparison.TariffAPrices"
                         SecondName="@selectedTariff" SecondSeries="@comparison.TariffBPrices"/>
    }
    else
    {
        <ProgressIndicator ProgressText="Loading Comparison Data..."/>
    }
</ErrorBoundary>

@code {
    Shared.Models.TariffComparison? comparison;
    private string? selectedTariff;
    private string? currentTariff;
    private bool loading = true;
    private CancellationTokenSource tokenSource = new();

    private async Task RecalcNewComparison()
    {
        if (!string.IsNullOrEmpty(currentTariff) && !string.IsNullOrEmpty(selectedTariff))
        {
            tokenSource.Cancel();
            tokenSource = new();
            
            var config = await inverterManagerService.GetConfig();
            config.LastComparisonTariff = selectedTariff;
            await inverterManagerService.SaveConfig(config);

            var newComparison = await inverterManagerService.GetTariffComparisonData(currentTariff, selectedTariff, tokenSource.Token);

            if (newComparison.TariffAPrices.Any() && newComparison.TariffBPrices.Any())
            {
                comparison = newComparison;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var config = await inverterManagerService.GetConfig();
        currentTariff = config.OctopusProductCode;
        selectedTariff = config.LastComparisonTariff;

        await RecalcNewComparison();

        loading = false;
        StateHasChanged();

        await base.OnInitializedAsync();
    }
}
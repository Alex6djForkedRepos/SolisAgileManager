@using ApexCharts
@using SolisManager.Shared.Interfaces
@using Size = MudBlazor.Size
@inject IInverterManagerService inverterManagerService

<PageTitle>Solis Manager</PageTitle>

<div class="title-bar">
    <h5>Comparison vs Current Tariff</h5>

    <div class="product-selector">
        <OctopusProductSelector @bind-TariffCode="@selectedTariff" @bind-TariffCode:after="@RecalcNewComparison" 
                            RegionCode="@currentTariff?.Last()" RegionClearable="false"/>
    </div>
</div>

@if (comparison != null)
{
    <ComparisonChart FirstName="@($"Current Tariff ({currentTariff})")" FirstSeries="comparison.TariffAPrices"
                     SecondName="@selectedTariff" SecondSeries="@comparison.TariffBPrices" />
}
else
{
    <ProgressIndicator ProgressText="Loading Octopus Tariff Data..."/>
}

@code {
    Shared.Models.TariffComparison? comparison;
    private string? selectedTariff;
    private string? currentTariff;
    
    private async Task RecalcNewComparison()
    {
        if (! string.IsNullOrEmpty(currentTariff) && ! string.IsNullOrEmpty(selectedTariff))
        {
            var config = await inverterManagerService.GetConfig();
            config.LastComparisonTariff = selectedTariff;
            await inverterManagerService.SaveConfig(config);
            
            comparison = await inverterManagerService.GetTariffComparisonData(currentTariff, selectedTariff);
            
            StateHasChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var config = await inverterManagerService.GetConfig();
        currentTariff = config.OctopusProductCode;
        selectedTariff = config.LastComparisonTariff;

        await RecalcNewComparison();
        
        await base.OnInitializedAsync();
    }
    
}
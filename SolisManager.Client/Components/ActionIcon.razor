@using Humanizer
<div class="@divStyle" title="@ToolTip" @onclick=OnActionClicked>
    <MudIcon Class="@SlotIconClass" Icon="@Icon" Size="@Size"/>
    @if (WithLabel)
    {
        <div>@Action.Humanize()</div>
    }
</div>

@code {
    [Parameter] public SlotAction Action { get; set; }
    
    [Parameter] public EventCallback<SlotAction> OnActionChanged { get; set; }

    [Parameter] public bool Pulse { get; set; }
    
    [Parameter] public bool WithLabel { get; set;  }

    [Parameter] public Size Size { get; set; } = Size.Medium;
    
    [Parameter] public bool IsEVCharge { get; set; }

    private string divStyle = "slot-icon";
    
    protected override void OnParametersSet()
    {
        divStyle = "slot-icon";
        
        if (OnActionChanged.HasDelegate)
            divStyle += " clickable-icon";

        if (Pulse)
            divStyle += " pulse-glow";

        if (Size == Size.Large)
            divStyle += " wider-border";

        if (!WithLabel)
            divStyle += " expander";
        
        base.OnParametersSet();
    }

    private async Task OnActionClicked()
    {
        await OnActionChanged.InvokeAsync(Action);
    }
    
    private string ToolTip => Action switch
    {
        SlotAction.DoNothing => "Click here to set this slot to No Action",
        SlotAction.Charge => "Click here to set this slot to charge the battery",
        SlotAction.Discharge => "Click here to set this slot to discharge the battery",
        SlotAction.ChargeIfLowBattery => "Click here to set this slot to boost the battery if low",
        SlotAction.Hold => "Click here to set this slot to hold the battery without discharging",
        _ => Icons.Material.Filled.PauseCircle
    };

    private string SlotIconClass => Action switch
    {
        SlotAction.Charge => "icon-charge",
        SlotAction.Discharge => "icon-discharge",
        SlotAction.DoNothing => "icon-noaction",
        SlotAction.ChargeIfLowBattery => "icon-boost",
        SlotAction.Hold => "icon-hold",
        _ => string.Empty
    };
    
    private string Icon => Action switch
    {
        SlotAction.DoNothing => Icons.Material.Filled.PauseCircle,
        SlotAction.Charge => IsEVCharge ? Icons.Material.Filled.ElectricCar : Icons.Material.Filled.Bolt,
        SlotAction.Discharge => Icons.Material.Filled.Battery0Bar,
        SlotAction.ChargeIfLowBattery => Icons.Material.Filled.BatteryUnknown,
        SlotAction.Hold => Icons.Material.Filled.StopCircle,
        _ => Icons.Material.Filled.Warning
    };
}
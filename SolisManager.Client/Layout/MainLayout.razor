@inherits LayoutComponentBase
@inject ILocalStorageService localStorage

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@DarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider/>

<div class="page">
    @if (showSidebar)
    {
        <div class="sidebar">
            <NavMenu @bind-DarkMode="@DarkMode" @bind-DarkMode:after="DarkModeChanged"/>
        </div>
    }

    @if (!loading)
    {
        <CascadingValue Value="DarkMode">
            <main>
                <article class="content px-4">
                    <ConfigValidator @bind-ConfigIsValid="@showSidebar">
                        @Body
                    </ConfigValidator>
                </article>
            </main>
        </CascadingValue>
    }
    else
    {
        <ProgressIndicator ProgressText="Initialising..."/>
    }
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool showSidebar = true;

    private const string darkModeKey = "dark-mode";
    private bool DarkMode = true;
    private bool loading = true;
    private MudThemeProvider? _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await localStorage.ContainKeyAsync(darkModeKey))
                DarkMode = await localStorage.GetItemAsync<bool>(darkModeKey);
            else if( _mudThemeProvider != null)
                DarkMode = await _mudThemeProvider.GetSystemPreference();
            
            loading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task DarkModeChanged()
    {
        await localStorage.SetItemAsync(darkModeKey, DarkMode);
    }
}
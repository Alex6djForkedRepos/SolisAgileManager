@inject ILocalStorageService localStorage

<div class="view-selections">
    <div class="@SelectionClass(ViewType.Grid)" title="Select Grid View">
        <MudIcon Icon="@Icons.Material.Filled.ViewList" Size="Size.Medium" @onclick="ShowGrid" />
    </div>
    <div class="@SelectionClass(ViewType.Chart)" title="Select Chart View">
        <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Medium" @onclick="ShowChart" />
    </div>
</div>

@code {

    public enum ViewType
    {
        Grid,
        Chart
    };

    [CascadingParameter] public bool DarkMode { get; set; }
    
    [Parameter] public string? SettingName { get; set; }

    [Parameter] public ViewType SelectedView { get; set; } = ViewType.Chart;
    
    [Parameter] public EventCallback<ViewType> SelectedViewChanged { get; set; }
    
    private string SelectionClass(ViewType type) => SelectedView == type ? 
                                        "selected-view" + (DarkMode ? " selected-view-dark" : ""): 
                                        "deselected-view";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ! string.IsNullOrEmpty(SettingName))
        {
            var setting = await localStorage.GetItemAsync<string>(SettingName);

            if (Enum.TryParse<ViewType>(setting, out var savedViewType))
            {
                SelectedView = savedViewType;
                await SelectedViewChanged.InvokeAsync(SelectedView);
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SettingChanged()
    {
        if( ! string.IsNullOrEmpty(SettingName))
            await localStorage.SetItemAsync(SettingName, SelectedView.ToString());
        await SelectedViewChanged.InvokeAsync(SelectedView);
    }
    
    private async Task ShowChart()
    {
        SelectedView = ViewType.Chart;
        await SettingChanged();
    }

    private async Task ShowGrid()
    {
        SelectedView = ViewType.Grid;
        await SettingChanged();
    }
}